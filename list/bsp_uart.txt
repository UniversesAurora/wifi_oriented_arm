; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o..\out\bsp_uart.o --asm_dir=..\list\ --list_dir=..\list\ --depend=..\out\bsp_uart.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\src -I..\lib\STM32F10x_StdPeriph_Driver\inc -I..\lib\CMSIS\CM3\CoreSupport -I..\lib\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=528 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DDEBUG --omf_browse=..\out\bsp_uart.crf ..\src\wifi\bsp_uart.c]
                          THUMB

                          AREA ||i.fgetc||, CODE, READONLY, ALIGN=2

                  fgetc PROC
;;;263    
;;;264    int fgetc(FILE* f)
000000  b510              PUSH     {r4,lr}
;;;265    {
000002  4604              MOV      r4,r0
;;;266        while (USART_GetFlagStatus(DEBUG_UART,
000004  bf00              NOP      
                  |L1.6|
000006  2120              MOVS     r1,#0x20
000008  4804              LDR      r0,|L1.28|
00000a  f7fffffe          BL       USART_GetFlagStatus
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L1.6|
;;;267                                   USART_FLAG_RXNE) == RESET);
;;;268    
;;;269        return (int)USART_ReceiveData(DEBUG_UART);
000012  4802              LDR      r0,|L1.28|
000014  f7fffffe          BL       USART_ReceiveData
;;;270    }
000018  bd10              POP      {r4,pc}
;;;271    
                          ENDP

00001a  0000              DCW      0x0000
                  |L1.28|
                          DCD      0x40013800

                          AREA ||i.fputc||, CODE, READONLY, ALIGN=2

                  fputc PROC
;;;253    
;;;254    int fputc(int ch, FILE* f)
000000  b570              PUSH     {r4-r6,lr}
;;;255    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;256        USART_SendData(DEBUG_UART, (uint8_t) ch);
000006  b2e1              UXTB     r1,r4
000008  4805              LDR      r0,|L2.32|
00000a  f7fffffe          BL       USART_SendData
;;;257    
;;;258        while (USART_GetFlagStatus(DEBUG_UART,
00000e  bf00              NOP      
                  |L2.16|
000010  2180              MOVS     r1,#0x80
000012  4803              LDR      r0,|L2.32|
000014  f7fffffe          BL       USART_GetFlagStatus
000018  2800              CMP      r0,#0
00001a  d0f9              BEQ      |L2.16|
;;;259                                   USART_FLAG_TXE) == RESET);
;;;260    
;;;261        return (ch);
00001c  4620              MOV      r0,r4
;;;262    }
00001e  bd70              POP      {r4-r6,pc}
;;;263    
                          ENDP

                  |L2.32|
                          DCD      0x40013800

                          AREA ||i.init_nvic||, CODE, READONLY, ALIGN=1

                  init_nvic PROC
;;;2      
;;;3      static void init_nvic(uint8_t IRQChannel,
000000  b5f8              PUSH     {r3-r7,lr}
;;;4                            uint8_t PreemptionPriority, uint8_t SubPriority)
;;;5      {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;6          NVIC_InitTypeDef nvic_init_type;
;;;7      
;;;8          nvic_init_type.NVIC_IRQChannel = IRQChannel;
000008  f88d6000          STRB     r6,[sp,#0]
;;;9          nvic_init_type.NVIC_IRQChannelPreemptionPriority =
00000c  f88d4001          STRB     r4,[sp,#1]
;;;10             PreemptionPriority;
;;;11         nvic_init_type.NVIC_IRQChannelSubPriority = SubPriority;
000010  f88d5002          STRB     r5,[sp,#2]
;;;12         nvic_init_type.NVIC_IRQChannelCmd = ENABLE;
000014  2001              MOVS     r0,#1
000016  f88d0003          STRB     r0,[sp,#3]
;;;13         NVIC_Init(&nvic_init_type);
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       NVIC_Init
;;;14     }
000020  bdf8              POP      {r3-r7,pc}
;;;15     
                          ENDP


                          AREA ||i.uart1_init||, CODE, READONLY, ALIGN=2

                  uart1_init PROC
;;;15     
;;;16     void uart1_init(uint32_t baudrate, uint16_t word_length,
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;17                     uint16_t stopbits, uint16_t parity, uint16_t mode,
;;;18                     uint16_t flow)
;;;19     {
000004  b085              SUB      sp,sp,#0x14
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
00000c  461f              MOV      r7,r3
00000e  e9dd890c          LDRD     r8,r9,[sp,#0x30]
;;;20         GPIO_InitTypeDef gpio_init_type;
;;;21         USART_InitTypeDef uart_init_type;
;;;22     
;;;23         UART1_GPIO_APBxClkCmd(UART1_GPIO_CLK, ENABLE);
000012  2101              MOVS     r1,#1
000014  2004              MOVS     r0,#4
000016  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;24     
;;;25         gpio_init_type.GPIO_Pin = UART1_TX_GPIO_PIN;
00001a  f44f7000          MOV      r0,#0x200
00001e  f8ad0010          STRH     r0,[sp,#0x10]
;;;26         gpio_init_type.GPIO_Mode = GPIO_Mode_AF_PP;
000022  2018              MOVS     r0,#0x18
000024  f88d0013          STRB     r0,[sp,#0x13]
;;;27         gpio_init_type.GPIO_Speed = GPIO_Speed_50MHz;
000028  2003              MOVS     r0,#3
00002a  f88d0012          STRB     r0,[sp,#0x12]
;;;28         GPIO_Init(UART1_TX_GPIO_PORT, &gpio_init_type);
00002e  a904              ADD      r1,sp,#0x10
000030  4819              LDR      r0,|L4.152|
000032  f7fffffe          BL       GPIO_Init
;;;29     
;;;30         gpio_init_type.GPIO_Pin = UART1_RX_GPIO_PIN;
000036  f44f6080          MOV      r0,#0x400
00003a  f8ad0010          STRH     r0,[sp,#0x10]
;;;31         gpio_init_type.GPIO_Mode = GPIO_Mode_IN_FLOATING;
00003e  2004              MOVS     r0,#4
000040  f88d0013          STRB     r0,[sp,#0x13]
;;;32         GPIO_Init(UART1_RX_GPIO_PORT, &gpio_init_type);
000044  a904              ADD      r1,sp,#0x10
000046  4814              LDR      r0,|L4.152|
000048  f7fffffe          BL       GPIO_Init
;;;33     
;;;34         UART1_APBxClkCmd(UART1_CLK, ENABLE);
00004c  2101              MOVS     r1,#1
00004e  0388              LSLS     r0,r1,#14
000050  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;35     
;;;36         uart_init_type.USART_BaudRate = baudrate;
000054  9400              STR      r4,[sp,#0]
;;;37     
;;;38         uart_init_type.USART_WordLength = word_length;
000056  f8ad5004          STRH     r5,[sp,#4]
;;;39     
;;;40         uart_init_type.USART_StopBits = stopbits;
00005a  f8ad6006          STRH     r6,[sp,#6]
;;;41     
;;;42         uart_init_type.USART_Parity = parity;
00005e  f8ad7008          STRH     r7,[sp,#8]
;;;43     
;;;44         uart_init_type.USART_HardwareFlowControl = flow;
000062  f8ad900c          STRH     r9,[sp,#0xc]
;;;45     
;;;46         uart_init_type.USART_Mode = mode;
000066  f8ad800a          STRH     r8,[sp,#0xa]
;;;47     
;;;48         USART_Init(UART1, &uart_init_type);
00006a  4669              MOV      r1,sp
00006c  480b              LDR      r0,|L4.156|
00006e  f7fffffe          BL       USART_Init
;;;49     
;;;50         init_nvic(UART1_IRQ, 1, 1);
000072  2201              MOVS     r2,#1
000074  4611              MOV      r1,r2
000076  2025              MOVS     r0,#0x25
000078  f7fffffe          BL       init_nvic
;;;51     
;;;52         USART_ITConfig(UART1, USART_IT_RXNE, ENABLE);
00007c  2201              MOVS     r2,#1
00007e  f2405125          MOV      r1,#0x525
000082  4806              LDR      r0,|L4.156|
000084  f7fffffe          BL       USART_ITConfig
;;;53     
;;;54         USART_Cmd(UART1, ENABLE);
000088  2101              MOVS     r1,#1
00008a  4804              LDR      r0,|L4.156|
00008c  f7fffffe          BL       USART_Cmd
;;;55     }
000090  b005              ADD      sp,sp,#0x14
000092  e8bd83f0          POP      {r4-r9,pc}
;;;56     
                          ENDP

000096  0000              DCW      0x0000
                  |L4.152|
                          DCD      0x40010800
                  |L4.156|
                          DCD      0x40013800

                          AREA ||i.uart2_init||, CODE, READONLY, ALIGN=2

                  uart2_init PROC
;;;56     
;;;57     void uart2_init(uint32_t baudrate, uint16_t word_length,
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;58                     uint16_t stopbits, uint16_t parity, uint16_t mode,
;;;59                     uint16_t flow)
;;;60     {
000004  b085              SUB      sp,sp,#0x14
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
00000c  461f              MOV      r7,r3
00000e  e9dd890c          LDRD     r8,r9,[sp,#0x30]
;;;61         GPIO_InitTypeDef gpio_init_type;
;;;62         USART_InitTypeDef uart_init_type;
;;;63     
;;;64         UART2_GPIO_APBxClkCmd(UART2_GPIO_CLK, ENABLE);
000012  2101              MOVS     r1,#1
000014  2004              MOVS     r0,#4
000016  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;65     
;;;66         gpio_init_type.GPIO_Pin = UART2_TX_GPIO_PIN;
00001a  2004              MOVS     r0,#4
00001c  f8ad0010          STRH     r0,[sp,#0x10]
;;;67         gpio_init_type.GPIO_Mode = GPIO_Mode_AF_PP;
000020  2018              MOVS     r0,#0x18
000022  f88d0013          STRB     r0,[sp,#0x13]
;;;68         gpio_init_type.GPIO_Speed = GPIO_Speed_50MHz;
000026  2003              MOVS     r0,#3
000028  f88d0012          STRB     r0,[sp,#0x12]
;;;69         GPIO_Init(UART2_TX_GPIO_PORT, &gpio_init_type);
00002c  a904              ADD      r1,sp,#0x10
00002e  4819              LDR      r0,|L5.148|
000030  f7fffffe          BL       GPIO_Init
;;;70     
;;;71         gpio_init_type.GPIO_Pin = UART2_RX_GPIO_PIN;
000034  2008              MOVS     r0,#8
000036  f8ad0010          STRH     r0,[sp,#0x10]
;;;72         gpio_init_type.GPIO_Mode = GPIO_Mode_IN_FLOATING;
00003a  2004              MOVS     r0,#4
00003c  f88d0013          STRB     r0,[sp,#0x13]
;;;73         GPIO_Init(UART2_RX_GPIO_PORT, &gpio_init_type);
000040  a904              ADD      r1,sp,#0x10
000042  4814              LDR      r0,|L5.148|
000044  f7fffffe          BL       GPIO_Init
;;;74     
;;;75         UART2_APBxClkCmd(UART2_CLK, ENABLE);
000048  2101              MOVS     r1,#1
00004a  0448              LSLS     r0,r1,#17
00004c  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;76     
;;;77         uart_init_type.USART_BaudRate = baudrate;
000050  9400              STR      r4,[sp,#0]
;;;78     
;;;79         uart_init_type.USART_WordLength = word_length;
000052  f8ad5004          STRH     r5,[sp,#4]
;;;80     
;;;81         uart_init_type.USART_StopBits = stopbits;
000056  f8ad6006          STRH     r6,[sp,#6]
;;;82     
;;;83         uart_init_type.USART_Parity = parity;
00005a  f8ad7008          STRH     r7,[sp,#8]
;;;84     
;;;85         uart_init_type.USART_HardwareFlowControl = flow;
00005e  f8ad900c          STRH     r9,[sp,#0xc]
;;;86     
;;;87         uart_init_type.USART_Mode = mode;
000062  f8ad800a          STRH     r8,[sp,#0xa]
;;;88     
;;;89         USART_Init(UART2, &uart_init_type);
000066  4669              MOV      r1,sp
000068  480b              LDR      r0,|L5.152|
00006a  f7fffffe          BL       USART_Init
;;;90     
;;;91         init_nvic(UART2_IRQ, 1, 2);
00006e  2202              MOVS     r2,#2
000070  2101              MOVS     r1,#1
000072  2026              MOVS     r0,#0x26
000074  f7fffffe          BL       init_nvic
;;;92     
;;;93         USART_ITConfig(UART2, USART_IT_RXNE, ENABLE);
000078  2201              MOVS     r2,#1
00007a  f2405125          MOV      r1,#0x525
00007e  4806              LDR      r0,|L5.152|
000080  f7fffffe          BL       USART_ITConfig
;;;94     
;;;95         USART_Cmd(UART2, ENABLE);
000084  2101              MOVS     r1,#1
000086  4804              LDR      r0,|L5.152|
000088  f7fffffe          BL       USART_Cmd
;;;96     }
00008c  b005              ADD      sp,sp,#0x14
00008e  e8bd83f0          POP      {r4-r9,pc}
;;;97     
                          ENDP

000092  0000              DCW      0x0000
                  |L5.148|
                          DCD      0x40010800
                  |L5.152|
                          DCD      0x40004400

                          AREA ||i.uart3_init||, CODE, READONLY, ALIGN=2

                  uart3_init PROC
;;;98     
;;;99     void uart3_init(uint32_t baudrate, uint16_t word_length,
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;100                    uint16_t stopbits, uint16_t parity, uint16_t mode,
;;;101                    uint16_t flow)
;;;102    {
000004  b085              SUB      sp,sp,#0x14
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
00000c  461f              MOV      r7,r3
00000e  e9dd890c          LDRD     r8,r9,[sp,#0x30]
;;;103        GPIO_InitTypeDef gpio_init_type;
;;;104        USART_InitTypeDef uart_init_type;
;;;105    
;;;106        UART3_GPIO_APBxClkCmd(UART3_GPIO_CLK, ENABLE);
000012  2101              MOVS     r1,#1
000014  2008              MOVS     r0,#8
000016  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;107    
;;;108        gpio_init_type.GPIO_Pin = UART3_TX_GPIO_PIN;
00001a  f44f6080          MOV      r0,#0x400
00001e  f8ad0010          STRH     r0,[sp,#0x10]
;;;109        gpio_init_type.GPIO_Mode = GPIO_Mode_AF_PP;
000022  2018              MOVS     r0,#0x18
000024  f88d0013          STRB     r0,[sp,#0x13]
;;;110        gpio_init_type.GPIO_Speed = GPIO_Speed_50MHz;
000028  2003              MOVS     r0,#3
00002a  f88d0012          STRB     r0,[sp,#0x12]
;;;111        GPIO_Init(UART3_TX_GPIO_PORT, &gpio_init_type);
00002e  a904              ADD      r1,sp,#0x10
000030  4819              LDR      r0,|L6.152|
000032  f7fffffe          BL       GPIO_Init
;;;112    
;;;113        gpio_init_type.GPIO_Pin = UART3_RX_GPIO_PIN;
000036  f44f6000          MOV      r0,#0x800
00003a  f8ad0010          STRH     r0,[sp,#0x10]
;;;114        gpio_init_type.GPIO_Mode = GPIO_Mode_IN_FLOATING;
00003e  2004              MOVS     r0,#4
000040  f88d0013          STRB     r0,[sp,#0x13]
;;;115        GPIO_Init(UART3_RX_GPIO_PORT, &gpio_init_type);
000044  a904              ADD      r1,sp,#0x10
000046  4814              LDR      r0,|L6.152|
000048  f7fffffe          BL       GPIO_Init
;;;116    
;;;117        UART3_APBxClkCmd(UART3_CLK, ENABLE);
00004c  2101              MOVS     r1,#1
00004e  0488              LSLS     r0,r1,#18
000050  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;118    
;;;119        uart_init_type.USART_BaudRate = baudrate;
000054  9400              STR      r4,[sp,#0]
;;;120    
;;;121        uart_init_type.USART_WordLength = word_length;
000056  f8ad5004          STRH     r5,[sp,#4]
;;;122    
;;;123        uart_init_type.USART_StopBits = stopbits;
00005a  f8ad6006          STRH     r6,[sp,#6]
;;;124    
;;;125        uart_init_type.USART_Parity = parity;
00005e  f8ad7008          STRH     r7,[sp,#8]
;;;126    
;;;127        uart_init_type.USART_HardwareFlowControl = flow;
000062  f8ad900c          STRH     r9,[sp,#0xc]
;;;128    
;;;129        uart_init_type.USART_Mode = mode;
000066  f8ad800a          STRH     r8,[sp,#0xa]
;;;130    
;;;131        USART_Init(UART3, &uart_init_type);
00006a  4669              MOV      r1,sp
00006c  480b              LDR      r0,|L6.156|
00006e  f7fffffe          BL       USART_Init
;;;132    
;;;133        init_nvic(UART3_IRQ, 1, 3);
000072  2203              MOVS     r2,#3
000074  2101              MOVS     r1,#1
000076  2027              MOVS     r0,#0x27
000078  f7fffffe          BL       init_nvic
;;;134    
;;;135        USART_ITConfig(UART3, USART_IT_RXNE, ENABLE);
00007c  2201              MOVS     r2,#1
00007e  f2405125          MOV      r1,#0x525
000082  4806              LDR      r0,|L6.156|
000084  f7fffffe          BL       USART_ITConfig
;;;136    
;;;137        USART_Cmd(UART3, ENABLE);
000088  2101              MOVS     r1,#1
00008a  4804              LDR      r0,|L6.156|
00008c  f7fffffe          BL       USART_Cmd
;;;138    }
000090  b005              ADD      sp,sp,#0x14
000092  e8bd83f0          POP      {r4-r9,pc}
;;;139    
                          ENDP

000096  0000              DCW      0x0000
                  |L6.152|
                          DCD      0x40010c00
                  |L6.156|
                          DCD      0x40004800

                          AREA ||i.uart4_init||, CODE, READONLY, ALIGN=2

                  uart4_init PROC
;;;140    
;;;141    void uart4_init(uint32_t baudrate, uint16_t word_length,
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;142                    uint16_t stopbits, uint16_t parity, uint16_t mode,
;;;143                    uint16_t flow)
;;;144    {
000004  b085              SUB      sp,sp,#0x14
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
00000c  461f              MOV      r7,r3
00000e  e9dd890c          LDRD     r8,r9,[sp,#0x30]
;;;145        GPIO_InitTypeDef gpio_init_type;
;;;146        USART_InitTypeDef uart_init_type;
;;;147    
;;;148        UART4_GPIO_APBxClkCmd(UART4_GPIO_CLK, ENABLE);
000012  2101              MOVS     r1,#1
000014  2010              MOVS     r0,#0x10
000016  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;149    
;;;150        gpio_init_type.GPIO_Pin = UART4_TX_GPIO_PIN;
00001a  f44f6080          MOV      r0,#0x400
00001e  f8ad0010          STRH     r0,[sp,#0x10]
;;;151        gpio_init_type.GPIO_Mode = GPIO_Mode_AF_PP;
000022  2018              MOVS     r0,#0x18
000024  f88d0013          STRB     r0,[sp,#0x13]
;;;152        gpio_init_type.GPIO_Speed = GPIO_Speed_50MHz;
000028  2003              MOVS     r0,#3
00002a  f88d0012          STRB     r0,[sp,#0x12]
;;;153        GPIO_Init(UART4_TX_GPIO_PORT, &gpio_init_type);
00002e  a904              ADD      r1,sp,#0x10
000030  4819              LDR      r0,|L7.152|
000032  f7fffffe          BL       GPIO_Init
;;;154    
;;;155        gpio_init_type.GPIO_Pin = UART4_RX_GPIO_PIN;
000036  f44f6000          MOV      r0,#0x800
00003a  f8ad0010          STRH     r0,[sp,#0x10]
;;;156        gpio_init_type.GPIO_Mode = GPIO_Mode_IN_FLOATING;
00003e  2004              MOVS     r0,#4
000040  f88d0013          STRB     r0,[sp,#0x13]
;;;157        GPIO_Init(UART4_RX_GPIO_PORT, &gpio_init_type);
000044  a904              ADD      r1,sp,#0x10
000046  4814              LDR      r0,|L7.152|
000048  f7fffffe          BL       GPIO_Init
;;;158    
;;;159        UART4_APBxClkCmd(UART4_CLK, ENABLE);
00004c  2101              MOVS     r1,#1
00004e  04c8              LSLS     r0,r1,#19
000050  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;160    
;;;161        uart_init_type.USART_BaudRate = baudrate;
000054  9400              STR      r4,[sp,#0]
;;;162    
;;;163        uart_init_type.USART_WordLength = word_length;
000056  f8ad5004          STRH     r5,[sp,#4]
;;;164    
;;;165        uart_init_type.USART_StopBits = stopbits;
00005a  f8ad6006          STRH     r6,[sp,#6]
;;;166    
;;;167        uart_init_type.USART_Parity = parity;
00005e  f8ad7008          STRH     r7,[sp,#8]
;;;168    
;;;169        uart_init_type.USART_HardwareFlowControl = flow;
000062  f8ad900c          STRH     r9,[sp,#0xc]
;;;170    
;;;171        uart_init_type.USART_Mode = mode;
000066  f8ad800a          STRH     r8,[sp,#0xa]
;;;172    
;;;173        USART_Init(UART4, &uart_init_type);
00006a  4669              MOV      r1,sp
00006c  480b              LDR      r0,|L7.156|
00006e  f7fffffe          BL       USART_Init
;;;174    
;;;175        init_nvic(UART4_IRQ, 1, 4);
000072  2204              MOVS     r2,#4
000074  2101              MOVS     r1,#1
000076  2034              MOVS     r0,#0x34
000078  f7fffffe          BL       init_nvic
;;;176    
;;;177        USART_ITConfig(UART4, USART_IT_RXNE, ENABLE);
00007c  2201              MOVS     r2,#1
00007e  f2405125          MOV      r1,#0x525
000082  4806              LDR      r0,|L7.156|
000084  f7fffffe          BL       USART_ITConfig
;;;178    
;;;179        USART_Cmd(UART4, ENABLE);
000088  2101              MOVS     r1,#1
00008a  4804              LDR      r0,|L7.156|
00008c  f7fffffe          BL       USART_Cmd
;;;180    }
000090  b005              ADD      sp,sp,#0x14
000092  e8bd83f0          POP      {r4-r9,pc}
;;;181    
                          ENDP

000096  0000              DCW      0x0000
                  |L7.152|
                          DCD      0x40011000
                  |L7.156|
                          DCD      0x40004c00

                          AREA ||i.uart5_init||, CODE, READONLY, ALIGN=2

                  uart5_init PROC
;;;182    
;;;183    void uart5_init(uint32_t baudrate, uint16_t word_length,
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;184                    uint16_t stopbits, uint16_t parity, uint16_t mode,
;;;185                    uint16_t flow)
;;;186    {
000004  b085              SUB      sp,sp,#0x14
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
00000c  461f              MOV      r7,r3
00000e  e9dd890c          LDRD     r8,r9,[sp,#0x30]
;;;187        GPIO_InitTypeDef gpio_init_type;
;;;188        USART_InitTypeDef uart_init_type;
;;;189    
;;;190        UART5_GPIO_APBxClkCmd(UART5_GPIO_CLK1, ENABLE);
000012  2101              MOVS     r1,#1
000014  2010              MOVS     r0,#0x10
000016  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;191        UART5_GPIO_APBxClkCmd(UART5_GPIO_CLK2, ENABLE);
00001a  2101              MOVS     r1,#1
00001c  2020              MOVS     r0,#0x20
00001e  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;192    
;;;193        gpio_init_type.GPIO_Pin = UART5_TX_GPIO_PIN;
000022  f44f5080          MOV      r0,#0x1000
000026  f8ad0010          STRH     r0,[sp,#0x10]
;;;194        gpio_init_type.GPIO_Mode = GPIO_Mode_AF_PP;
00002a  2018              MOVS     r0,#0x18
00002c  f88d0013          STRB     r0,[sp,#0x13]
;;;195        gpio_init_type.GPIO_Speed = GPIO_Speed_50MHz;
000030  2003              MOVS     r0,#3
000032  f88d0012          STRB     r0,[sp,#0x12]
;;;196        GPIO_Init(UART5_TX_GPIO_PORT, &gpio_init_type);
000036  a904              ADD      r1,sp,#0x10
000038  4818              LDR      r0,|L8.156|
00003a  f7fffffe          BL       GPIO_Init
;;;197    
;;;198        gpio_init_type.GPIO_Pin = UART5_RX_GPIO_PIN;
00003e  2004              MOVS     r0,#4
000040  f8ad0010          STRH     r0,[sp,#0x10]
;;;199        gpio_init_type.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000044  f88d0013          STRB     r0,[sp,#0x13]
;;;200        GPIO_Init(UART5_RX_GPIO_PORT, &gpio_init_type);
000048  a904              ADD      r1,sp,#0x10
00004a  4815              LDR      r0,|L8.160|
00004c  f7fffffe          BL       GPIO_Init
;;;201    
;;;202        UART5_APBxClkCmd(UART5_CLK, ENABLE);
000050  2101              MOVS     r1,#1
000052  0508              LSLS     r0,r1,#20
000054  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;203    
;;;204        uart_init_type.USART_BaudRate = baudrate;
000058  9400              STR      r4,[sp,#0]
;;;205    
;;;206        uart_init_type.USART_WordLength = word_length;
00005a  f8ad5004          STRH     r5,[sp,#4]
;;;207    
;;;208        uart_init_type.USART_StopBits = stopbits;
00005e  f8ad6006          STRH     r6,[sp,#6]
;;;209    
;;;210        uart_init_type.USART_Parity = parity;
000062  f8ad7008          STRH     r7,[sp,#8]
;;;211    
;;;212        uart_init_type.USART_HardwareFlowControl = flow;
000066  f8ad900c          STRH     r9,[sp,#0xc]
;;;213    
;;;214        uart_init_type.USART_Mode = mode;
00006a  f8ad800a          STRH     r8,[sp,#0xa]
;;;215    
;;;216        USART_Init(UART5, &uart_init_type);
00006e  4669              MOV      r1,sp
000070  480c              LDR      r0,|L8.164|
000072  f7fffffe          BL       USART_Init
;;;217    
;;;218        init_nvic(UART5_IRQ, 1, 5);
000076  2205              MOVS     r2,#5
000078  2101              MOVS     r1,#1
00007a  2035              MOVS     r0,#0x35
00007c  f7fffffe          BL       init_nvic
;;;219    
;;;220        USART_ITConfig(UART5, USART_IT_RXNE, ENABLE);
000080  2201              MOVS     r2,#1
000082  f2405125          MOV      r1,#0x525
000086  4807              LDR      r0,|L8.164|
000088  f7fffffe          BL       USART_ITConfig
;;;221    
;;;222        USART_Cmd(UART5, ENABLE);
00008c  2101              MOVS     r1,#1
00008e  4805              LDR      r0,|L8.164|
000090  f7fffffe          BL       USART_Cmd
;;;223    }
000094  b005              ADD      sp,sp,#0x14
000096  e8bd83f0          POP      {r4-r9,pc}
;;;224    
                          ENDP

00009a  0000              DCW      0x0000
                  |L8.156|
                          DCD      0x40011000
                  |L8.160|
                          DCD      0x40011400
                  |L8.164|
                          DCD      0x40005000

                          AREA ||i.uart_send_byte||, CODE, READONLY, ALIGN=1

                  uart_send_byte PROC
;;;229    
;;;230    void uart_send_byte(USART_TypeDef* pUSARTx, uint8_t ch)
000000  b570              PUSH     {r4-r6,lr}
;;;231    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;232        USART_SendData(pUSARTx, ch);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       USART_SendData
;;;233    
;;;234        while (USART_GetFlagStatus(pUSARTx,
00000e  bf00              NOP      
                  |L9.16|
000010  2180              MOVS     r1,#0x80
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       USART_GetFlagStatus
000018  2800              CMP      r0,#0
00001a  d0f9              BEQ      |L9.16|
;;;235                                   USART_FLAG_TXE) == RESET);
;;;236    }
00001c  bd70              POP      {r4-r6,pc}
;;;237    
                          ENDP


                          AREA ||i.uart_send_string||, CODE, READONLY, ALIGN=1

                  uart_send_string PROC
;;;238    
;;;239    void uart_send_string(USART_TypeDef* pUSARTx, char* str)
000000  b5d0              PUSH     {r4,r6,r7,lr}
;;;240    {
000002  4607              MOV      r7,r0
000004  460e              MOV      r6,r1
;;;241        uint64_t k = 0;
000006  2400              MOVS     r4,#0
;;;242    
;;;243        do
000008  bf00              NOP      
                  |L10.10|
;;;244        {
;;;245            uart_send_byte(pUSARTx, str[k]);
00000a  5d31              LDRB     r1,[r6,r4]
00000c  4638              MOV      r0,r7
00000e  f7fffffe          BL       uart_send_byte
;;;246            k++;
000012  1c64              ADDS     r4,r4,#1
;;;247        }
;;;248        while (str[k - 1] != '\0');
000014  1e60              SUBS     r0,r4,#1
000016  5c30              LDRB     r0,[r6,r0]
000018  2800              CMP      r0,#0
00001a  d1f6              BNE      |L10.10|
;;;249    
;;;250        while (USART_GetFlagStatus(pUSARTx,
00001c  bf00              NOP      
                  |L10.30|
00001e  f04f0140          MOV      r1,#0x40
000022  4638              MOV      r0,r7
000024  f7fffffe          BL       USART_GetFlagStatus
000028  2800              CMP      r0,#0
00002a  d0f8              BEQ      |L10.30|
;;;251                                   USART_FLAG_TC) == RESET);
;;;252    }
00002c  bdd0              POP      {r4,r6,r7,pc}
;;;253    
                          ENDP

