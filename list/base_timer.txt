; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o..\out\base_timer.o --asm_dir=..\list\ --list_dir=..\list\ --depend=..\out\base_timer.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\src -I..\lib\STM32F10x_StdPeriph_Driver\inc -I..\lib\CMSIS\CM3\CoreSupport -I..\lib\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=528 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\out\base_timer.crf ..\src\timers\base_timer.c]
                          THUMB

                          AREA ||i.base_timer_1_init||, CODE, READONLY, ALIGN=2

                  base_timer_1_init PROC
;;;26     
;;;27     void base_timer_1_init(void)
000000  b510              PUSH     {r4,lr}
;;;28     {
;;;29         basic_timer_nvic_config(BASIC_TIM1_IRQ, 0, 3);
000002  2203              MOVS     r2,#3
000004  2100              MOVS     r1,#0
000006  2036              MOVS     r0,#0x36
000008  f7fffffe          BL       basic_timer_nvic_config
;;;30         BASIC_TIM1_APBxClock_FUN(BASIC_TIM1_CLK, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  2010              MOVS     r0,#0x10
000010  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;31         BASIC_TIM1->PSC = BASIC_TIM1_Prescaler;
000014  2047              MOVS     r0,#0x47
000016  4904              LDR      r1,|L1.40|
000018  8508              STRH     r0,[r1,#0x28]
;;;32         BASIC_TIM1->EGR = TIM_PSCReloadMode_Immediate;
00001a  2001              MOVS     r0,#1
00001c  8288              STRH     r0,[r1,#0x14]
;;;33         TIM_ARRPreloadConfig(BASIC_TIM1, DISABLE);
00001e  2100              MOVS     r1,#0
000020  4801              LDR      r0,|L1.40|
000022  f7fffffe          BL       TIM_ARRPreloadConfig
;;;34     }
000026  bd10              POP      {r4,pc}
;;;35     
                          ENDP

                  |L1.40|
                          DCD      0x40001000

                          AREA ||i.base_timer_2_init||, CODE, READONLY, ALIGN=2

                  base_timer_2_init PROC
;;;35     
;;;36     void base_timer_2_init(void)
000000  b510              PUSH     {r4,lr}
;;;37     {
;;;38         basic_timer_nvic_config(BASIC_TIM2_IRQ, 0, 2);
000002  2202              MOVS     r2,#2
000004  2100              MOVS     r1,#0
000006  2037              MOVS     r0,#0x37
000008  f7fffffe          BL       basic_timer_nvic_config
;;;39         BASIC_TIM2_APBxClock_FUN(BASIC_TIM2_CLK, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  2020              MOVS     r0,#0x20
000010  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;40         BASIC_TIM2->PSC = BASIC_TIM2_Prescaler;
000014  2047              MOVS     r0,#0x47
000016  4906              LDR      r1,|L2.48|
000018  8008              STRH     r0,[r1,#0]
;;;41         BASIC_TIM2->EGR = TIM_PSCReloadMode_Immediate;
00001a  2001              MOVS     r0,#1
00001c  4904              LDR      r1,|L2.48|
00001e  3914              SUBS     r1,r1,#0x14
000020  8008              STRH     r0,[r1,#0]
;;;42         TIM_ARRPreloadConfig(BASIC_TIM2, DISABLE);
000022  2100              MOVS     r1,#0
000024  4802              LDR      r0,|L2.48|
000026  3828              SUBS     r0,r0,#0x28
000028  f7fffffe          BL       TIM_ARRPreloadConfig
;;;43     }
00002c  bd10              POP      {r4,pc}
;;;44     
                          ENDP

00002e  0000              DCW      0x0000
                  |L2.48|
                          DCD      0x40001428

                          AREA ||i.basic_timer_mode_config||, CODE, READONLY, ALIGN=1

                  basic_timer_mode_config PROC
;;;14     
;;;15     static void basic_timer_mode_config(TIM_TypeDef* TIMx,
000000  b570              PUSH     {r4-r6,lr}
;;;16                                         uint16_t period)
;;;17     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;18         TIM_SetCounter(TIMx, 0);
000006  2100              MOVS     r1,#0
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       TIM_SetCounter
;;;19     
;;;20         TIMx->ARR = period;
00000e  85a5              STRH     r5,[r4,#0x2c]
;;;21     
;;;22         TIM_ClearFlag(TIMx, TIM_FLAG_Update);
000010  2101              MOVS     r1,#1
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       TIM_ClearFlag
;;;23         TIM_ITConfig(TIMx, TIM_IT_Update, ENABLE);
000018  2201              MOVS     r2,#1
00001a  4611              MOV      r1,r2
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       TIM_ITConfig
;;;24         TIM_Cmd(TIMx, ENABLE);
000022  2101              MOVS     r1,#1
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       TIM_Cmd
;;;25     }
00002a  bd70              POP      {r4-r6,pc}
;;;26     
                          ENDP


                          AREA ||i.basic_timer_nvic_config||, CODE, READONLY, ALIGN=1

                  basic_timer_nvic_config PROC
;;;2      
;;;3      static void basic_timer_nvic_config(uint8_t IRQChannel,
000000  b5f8              PUSH     {r3-r7,lr}
;;;4                                          uint8_t PreemptionPriority, uint8_t SubPriority)
;;;5      {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;6          NVIC_InitTypeDef nvic_init_type;
;;;7          nvic_init_type.NVIC_IRQChannel = IRQChannel;
000008  f88d6000          STRB     r6,[sp,#0]
;;;8          nvic_init_type.NVIC_IRQChannelPreemptionPriority =
00000c  f88d4001          STRB     r4,[sp,#1]
;;;9              PreemptionPriority;
;;;10         nvic_init_type.NVIC_IRQChannelSubPriority = SubPriority;
000010  f88d5002          STRB     r5,[sp,#2]
;;;11         nvic_init_type.NVIC_IRQChannelCmd = ENABLE;
000014  2001              MOVS     r0,#1
000016  f88d0003          STRB     r0,[sp,#3]
;;;12         NVIC_Init(&nvic_init_type);
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       NVIC_Init
;;;13     }
000020  bdf8              POP      {r3-r7,pc}
;;;14     
                          ENDP


                          AREA ||i.delay_base_timer_1||, CODE, READONLY, ALIGN=2

                  delay_base_timer_1 PROC
;;;48     
;;;49     void delay_base_timer_1(uint64_t time, uint32_t unit)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;50     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4692              MOV      r10,r2
;;;51         uint32_t max = (UINT16_MAX + 1) / unit;
00000a  f44f3080          MOV      r0,#0x10000
00000e  fbb0fbfa          UDIV     r11,r0,r10
;;;52         uint32_t max_ticks = unit * max - 1;
000012  fb0af00b          MUL      r0,r10,r11
000016  1e40              SUBS     r0,r0,#1
000018  9000              STR      r0,[sp,#0]
;;;53         uint64_t times = time / max;
00001a  465a              MOV      r2,r11
00001c  2300              MOVS     r3,#0
00001e  4620              MOV      r0,r4
000020  4629              MOV      r1,r5
000022  f7fffffe          BL       __aeabi_uldivmod
000026  4680              MOV      r8,r0
000028  4689              MOV      r9,r1
;;;54         uint64_t remain = time % max;
00002a  465a              MOV      r2,r11
00002c  2300              MOVS     r3,#0
00002e  4620              MOV      r0,r4
000030  4629              MOV      r1,r5
000032  f7fffffe          BL       __aeabi_uldivmod
000036  4616              MOV      r6,r2
;;;55     
;;;56         basic_tim1_int_times = times;
000038  4a17              LDR      r2,|L5.152|
00003a  f8c28000          STR      r8,[r2,#0]  ; basic_tim1_int_times
00003e  f8c29004          STR      r9,[r2,#4]  ; basic_tim1_int_times
;;;57         basic_timer_mode_config(BASIC_TIM1, max_ticks);
000042  9800              LDR      r0,[sp,#0]
000044  b281              UXTH     r1,r0
000046  4815              LDR      r0,|L5.156|
000048  f7fffffe          BL       basic_timer_mode_config
;;;58     
;;;59         while (basic_tim1_int_times);
00004c  bf00              NOP      
                  |L5.78|
00004e  4812              LDR      r0,|L5.152|
000050  6801              LDR      r1,[r0,#0]  ; basic_tim1_int_times
000052  6840              LDR      r0,[r0,#4]  ; basic_tim1_int_times
000054  2300              MOVS     r3,#0
000056  4059              EORS     r1,r1,r3
000058  4058              EORS     r0,r0,r3
00005a  4301              ORRS     r1,r1,r0
00005c  d1f7              BNE      |L5.78|
;;;60     
;;;61         TIM_Cmd(BASIC_TIM1, DISABLE);
00005e  480f              LDR      r0,|L5.156|
000060  f7fffffe          BL       TIM_Cmd
;;;62     
;;;63         basic_tim1_int_times = 1;
000064  2101              MOVS     r1,#1
000066  2000              MOVS     r0,#0
000068  4a0b              LDR      r2,|L5.152|
00006a  6011              STR      r1,[r2,#0]  ; basic_tim1_int_times
00006c  6050              STR      r0,[r2,#4]  ; basic_tim1_int_times
;;;64         basic_timer_mode_config(BASIC_TIM1, remain * unit - 1);
00006e  fba6200a          UMULL    r2,r0,r6,r10
000072  1e50              SUBS     r0,r2,#1
000074  b281              UXTH     r1,r0
000076  4809              LDR      r0,|L5.156|
000078  f7fffffe          BL       basic_timer_mode_config
;;;65     
;;;66         while (basic_tim1_int_times);
00007c  bf00              NOP      
                  |L5.126|
00007e  4806              LDR      r0,|L5.152|
000080  6801              LDR      r1,[r0,#0]  ; basic_tim1_int_times
000082  6840              LDR      r0,[r0,#4]  ; basic_tim1_int_times
000084  2300              MOVS     r3,#0
000086  4059              EORS     r1,r1,r3
000088  4058              EORS     r0,r0,r3
00008a  4301              ORRS     r1,r1,r0
00008c  d1f7              BNE      |L5.126|
;;;67     
;;;68         TIM_Cmd(BASIC_TIM1, DISABLE);
00008e  4803              LDR      r0,|L5.156|
000090  f7fffffe          BL       TIM_Cmd
;;;69     }
000094  e8bd8ff8          POP      {r3-r11,pc}
;;;70     
                          ENDP

                  |L5.152|
                          DCD      basic_tim1_int_times
                  |L5.156|
                          DCD      0x40001000

                          AREA ||i.delay_base_timer_1_ms||, CODE, READONLY, ALIGN=1

                  delay_base_timer_1_ms PROC
;;;75     
;;;76     void delay_base_timer_1_ms(uint64_t ms)
000000  b570              PUSH     {r4-r6,lr}
;;;77     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;78         delay_base_timer_1(ms, 1000);
000006  f44f727a          MOV      r2,#0x3e8
00000a  4620              MOV      r0,r4
00000c  4629              MOV      r1,r5
00000e  f7fffffe          BL       delay_base_timer_1
;;;79     }
000012  bd70              POP      {r4-r6,pc}
;;;80     
                          ENDP


                          AREA ||i.delay_base_timer_1_us||, CODE, READONLY, ALIGN=1

                  delay_base_timer_1_us PROC
;;;70     
;;;71     void delay_base_timer_1_us(uint64_t us)
000000  b570              PUSH     {r4-r6,lr}
;;;72     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;73         delay_base_timer_1(us, 1);
000006  2201              MOVS     r2,#1
000008  4620              MOV      r0,r4
00000a  4629              MOV      r1,r5
00000c  f7fffffe          BL       delay_base_timer_1
;;;74     }
000010  bd70              POP      {r4-r6,pc}
;;;75     
                          ENDP


                          AREA ||i.delay_base_timer_2||, CODE, READONLY, ALIGN=2

                  delay_base_timer_2 PROC
;;;85     
;;;86     void delay_base_timer_2(uint64_t time, uint32_t unit)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;87     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4692              MOV      r10,r2
;;;88         uint32_t max = (UINT16_MAX + 1) / unit;
00000a  f44f3080          MOV      r0,#0x10000
00000e  fbb0fbfa          UDIV     r11,r0,r10
;;;89         uint32_t max_ticks = unit * max - 1;
000012  fb0af00b          MUL      r0,r10,r11
000016  1e40              SUBS     r0,r0,#1
000018  9000              STR      r0,[sp,#0]
;;;90         uint64_t times = time / max;
00001a  465a              MOV      r2,r11
00001c  2300              MOVS     r3,#0
00001e  4620              MOV      r0,r4
000020  4629              MOV      r1,r5
000022  f7fffffe          BL       __aeabi_uldivmod
000026  4680              MOV      r8,r0
000028  4689              MOV      r9,r1
;;;91         uint64_t remain = time % max;
00002a  465a              MOV      r2,r11
00002c  2300              MOVS     r3,#0
00002e  4620              MOV      r0,r4
000030  4629              MOV      r1,r5
000032  f7fffffe          BL       __aeabi_uldivmod
000036  4616              MOV      r6,r2
;;;92     
;;;93         basic_tim2_int_times = times;
000038  4a17              LDR      r2,|L8.152|
00003a  f8c28000          STR      r8,[r2,#0]  ; basic_tim2_int_times
00003e  f8c29004          STR      r9,[r2,#4]  ; basic_tim2_int_times
;;;94         basic_timer_mode_config(BASIC_TIM2, max_ticks);
000042  9800              LDR      r0,[sp,#0]
000044  b281              UXTH     r1,r0
000046  4815              LDR      r0,|L8.156|
000048  f7fffffe          BL       basic_timer_mode_config
;;;95     
;;;96         while (basic_tim2_int_times);
00004c  bf00              NOP      
                  |L8.78|
00004e  4812              LDR      r0,|L8.152|
000050  6801              LDR      r1,[r0,#0]  ; basic_tim2_int_times
000052  6840              LDR      r0,[r0,#4]  ; basic_tim2_int_times
000054  2300              MOVS     r3,#0
000056  4059              EORS     r1,r1,r3
000058  4058              EORS     r0,r0,r3
00005a  4301              ORRS     r1,r1,r0
00005c  d1f7              BNE      |L8.78|
;;;97     
;;;98         TIM_Cmd(BASIC_TIM2, DISABLE);
00005e  480f              LDR      r0,|L8.156|
000060  f7fffffe          BL       TIM_Cmd
;;;99     
;;;100        basic_tim2_int_times = 1;
000064  2101              MOVS     r1,#1
000066  2000              MOVS     r0,#0
000068  4a0b              LDR      r2,|L8.152|
00006a  6011              STR      r1,[r2,#0]  ; basic_tim2_int_times
00006c  6050              STR      r0,[r2,#4]  ; basic_tim2_int_times
;;;101        basic_timer_mode_config(BASIC_TIM2, remain * unit - 1);
00006e  fba6200a          UMULL    r2,r0,r6,r10
000072  1e50              SUBS     r0,r2,#1
000074  b281              UXTH     r1,r0
000076  4809              LDR      r0,|L8.156|
000078  f7fffffe          BL       basic_timer_mode_config
;;;102    
;;;103        while (basic_tim2_int_times);
00007c  bf00              NOP      
                  |L8.126|
00007e  4806              LDR      r0,|L8.152|
000080  6801              LDR      r1,[r0,#0]  ; basic_tim2_int_times
000082  6840              LDR      r0,[r0,#4]  ; basic_tim2_int_times
000084  2300              MOVS     r3,#0
000086  4059              EORS     r1,r1,r3
000088  4058              EORS     r0,r0,r3
00008a  4301              ORRS     r1,r1,r0
00008c  d1f7              BNE      |L8.126|
;;;104    
;;;105        TIM_Cmd(BASIC_TIM2, DISABLE);
00008e  4803              LDR      r0,|L8.156|
000090  f7fffffe          BL       TIM_Cmd
;;;106    }
000094  e8bd8ff8          POP      {r3-r11,pc}
;;;107    
                          ENDP

                  |L8.152|
                          DCD      basic_tim2_int_times
                  |L8.156|
                          DCD      0x40001400

                          AREA ||i.delay_base_timer_2_ms||, CODE, READONLY, ALIGN=1

                  delay_base_timer_2_ms PROC
;;;112    
;;;113    void delay_base_timer_2_ms(uint64_t ms)
000000  b570              PUSH     {r4-r6,lr}
;;;114    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;115        delay_base_timer_2(ms, 1000);
000006  f44f727a          MOV      r2,#0x3e8
00000a  4620              MOV      r0,r4
00000c  4629              MOV      r1,r5
00000e  f7fffffe          BL       delay_base_timer_2
;;;116    }
000012  bd70              POP      {r4-r6,pc}
;;;117    
                          ENDP


                          AREA ||i.delay_base_timer_2_us||, CODE, READONLY, ALIGN=1

                  delay_base_timer_2_us PROC
;;;107    
;;;108    void delay_base_timer_2_us(uint64_t us)
000000  b570              PUSH     {r4-r6,lr}
;;;109    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;110        delay_base_timer_2(us, 1);
000006  2201              MOVS     r2,#1
000008  4620              MOV      r0,r4
00000a  4629              MOV      r1,r5
00000c  f7fffffe          BL       delay_base_timer_2
;;;111    }
000010  bd70              POP      {r4-r6,pc}
;;;112    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=3

                  basic_tim1_int_times
                          %        8
                  basic_tim2_int_times
                          %        8
