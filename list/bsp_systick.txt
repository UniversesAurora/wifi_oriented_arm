; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o..\out\bsp_systick.o --asm_dir=..\list\ --list_dir=..\list\ --depend=..\out\bsp_systick.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\src -I..\lib\STM32F10x_StdPeriph_Driver\inc -I..\lib\CMSIS\CM3\CoreSupport -I..\lib\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=528 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DDEBUG --omf_browse=..\out\bsp_systick.crf ..\src\timers\bsp_systick.c]
                          THUMB

                          AREA ||i.SysTick_Config||, CODE, READONLY, ALIGN=2

                  SysTick_Config PROC
;;;1693    */
;;;1694   static __INLINE uint32_t SysTick_Config(uint32_t ticks)
000000  b530              PUSH     {r4,r5,lr}
;;;1695   { 
000002  4601              MOV      r1,r0
;;;1696     if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
000004  f1b17f80          CMP      r1,#0x1000000
000008  d301              BCC      |L1.14|
00000a  2001              MOVS     r0,#1
                  |L1.12|
;;;1697                                                                  
;;;1698     SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
;;;1699     NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
;;;1700     SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
;;;1701     SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
;;;1702                      SysTick_CTRL_TICKINT_Msk   | 
;;;1703                      SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
;;;1704     return (0);                                                  /* Function successful */
;;;1705   }
00000c  bd30              POP      {r4,r5,pc}
                  |L1.14|
00000e  f021407f          BIC      r0,r1,#0xff000000     ;1698
000012  1e40              SUBS     r0,r0,#1              ;1698
000014  f04f22e0          MOV      r2,#0xe000e000        ;1698
000018  6150              STR      r0,[r2,#0x14]         ;1698
00001a  1750              ASRS     r0,r2,#29             ;1699
00001c  220f              MOVS     r2,#0xf               ;1699
00001e  2800              CMP      r0,#0                 ;1699
000020  da07              BGE      |L1.50|
000022  0713              LSLS     r3,r2,#28             ;1699
000024  0e1d              LSRS     r5,r3,#24             ;1699
000026  4b09              LDR      r3,|L1.76|
000028  f000040f          AND      r4,r0,#0xf            ;1699
00002c  1f24              SUBS     r4,r4,#4              ;1699
00002e  551d              STRB     r5,[r3,r4]            ;1699
000030  e003              B        |L1.58|
                  |L1.50|
000032  0713              LSLS     r3,r2,#28             ;1699
000034  0e1c              LSRS     r4,r3,#24             ;1699
000036  4b06              LDR      r3,|L1.80|
000038  541c              STRB     r4,[r3,r0]            ;1699
                  |L1.58|
00003a  bf00              NOP                            ;1699
00003c  2000              MOVS     r0,#0                 ;1700
00003e  f04f22e0          MOV      r2,#0xe000e000        ;1700
000042  6190              STR      r0,[r2,#0x18]         ;1700
000044  2007              MOVS     r0,#7                 ;1701
000046  6110              STR      r0,[r2,#0x10]         ;1701
000048  2000              MOVS     r0,#0                 ;1704
00004a  e7df              B        |L1.12|
;;;1706   
                          ENDP

                  |L1.76|
                          DCD      0xe000ed18
                  |L1.80|
                          DCD      0xe000e400

                          AREA ||i.delay_hard||, CODE, READONLY, ALIGN=1

                  delay_hard PROC
;;;126    
;;;127    static void delay_hard(uint64_t time, uint32_t unit)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;128    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4692              MOV      r10,r2
;;;129        uint32_t max = SysTick_LOAD_RELOAD_Msk / unit;
00000a  f06f407f          MVN      r0,#0xff000000
00000e  fbb0fbfa          UDIV     r11,r0,r10
;;;130        uint32_t max_ticks = unit * max;
000012  fb0af00b          MUL      r0,r10,r11
000016  9000              STR      r0,[sp,#0]
;;;131        uint64_t times = time / max;
000018  465a              MOV      r2,r11
00001a  2300              MOVS     r3,#0
00001c  4620              MOV      r0,r4
00001e  4629              MOV      r1,r5
000020  f7fffffe          BL       __aeabi_uldivmod
000024  4606              MOV      r6,r0
000026  460f              MOV      r7,r1
;;;132        uint64_t remain = time % max;
000028  465a              MOV      r2,r11
00002a  2300              MOVS     r3,#0
00002c  4620              MOV      r0,r4
00002e  4629              MOV      r1,r5
000030  f7fffffe          BL       __aeabi_uldivmod
000034  4690              MOV      r8,r2
;;;133    
;;;134        SysTick_Config(max_ticks);
000036  9800              LDR      r0,[sp,#0]
000038  f7fffffe          BL       SysTick_Config
;;;135    
;;;136        for (; times > 0; times--)
00003c  e00a              B        |L2.84|
                  |L2.62|
;;;137            while (!((SysTick->CTRL) & (1 << 16)));
00003e  bf00              NOP      
                  |L2.64|
000040  f04f20e0          MOV      r0,#0xe000e000
000044  6900              LDR      r0,[r0,#0x10]
000046  f4003080          AND      r0,r0,#0x10000
00004a  2800              CMP      r0,#0
00004c  d0f8              BEQ      |L2.64|
00004e  1e76              SUBS     r6,r6,#1              ;136
000050  f1670700          SBC      r7,r7,#0              ;136
                  |L2.84|
000054  2100              MOVS     r1,#0                 ;136
000056  ea860001          EOR      r0,r6,r1              ;136
00005a  4079              EORS     r1,r1,r7              ;136
00005c  4308              ORRS     r0,r0,r1              ;136
00005e  d1ee              BNE      |L2.62|
;;;138    
;;;139        SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
000060  f04f20e0          MOV      r0,#0xe000e000
000064  6900              LDR      r0,[r0,#0x10]
000066  f0200001          BIC      r0,r0,#1
00006a  f04f21e0          MOV      r1,#0xe000e000
00006e  6108              STR      r0,[r1,#0x10]
;;;140    
;;;141        SysTick_Config(remain * unit);
000070  fba8020a          UMULL    r0,r2,r8,r10
000074  f7fffffe          BL       SysTick_Config
;;;142    
;;;143        while (!((SysTick->CTRL) & (1 << 16)));
000078  bf00              NOP      
                  |L2.122|
00007a  f04f20e0          MOV      r0,#0xe000e000
00007e  6900              LDR      r0,[r0,#0x10]
000080  f4003080          AND      r0,r0,#0x10000
000084  2800              CMP      r0,#0
000086  d0f8              BEQ      |L2.122|
;;;144    
;;;145        SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
000088  f04f20e0          MOV      r0,#0xe000e000
00008c  6900              LDR      r0,[r0,#0x10]
00008e  f0200001          BIC      r0,r0,#1
000092  f04f21e0          MOV      r1,#0xe000e000
000096  6108              STR      r0,[r1,#0x10]
;;;146    }
000098  e8bd8ff8          POP      {r3-r11,pc}
;;;147    
                          ENDP


                          AREA ||i.delay_hard_ms||, CODE, READONLY, ALIGN=2

                  delay_hard_ms PROC
;;;152    
;;;153    void delay_hard_ms(uint64_t ms)
000000  b570              PUSH     {r4-r6,lr}
;;;154    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;155        delay_hard(ms, 72000);
000006  4a03              LDR      r2,|L3.20|
000008  4620              MOV      r0,r4
00000a  4629              MOV      r1,r5
00000c  f7fffffe          BL       delay_hard
;;;156    }
000010  bd70              POP      {r4-r6,pc}
;;;157    
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      0x00011940

                          AREA ||i.delay_hard_us||, CODE, READONLY, ALIGN=1

                  delay_hard_us PROC
;;;147    
;;;148    void delay_hard_us(uint64_t us)
000000  b570              PUSH     {r4-r6,lr}
;;;149    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;150        delay_hard(us, 72);
000006  2248              MOVS     r2,#0x48
000008  4620              MOV      r0,r4
00000a  4629              MOV      r1,r5
00000c  f7fffffe          BL       delay_hard
;;;151    }
000010  bd70              POP      {r4-r6,pc}
;;;152    
                          ENDP


                          AREA ||i.delay_timer_handler||, CODE, READONLY, ALIGN=2

                  delay_timer_handler PROC
;;;57     
;;;58     static void delay_timer_handler(uint64_t reg_identifier,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;59                                     void* message)
;;;60     {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4692              MOV      r10,r2
;;;61         if (reg_identifier >= MAX_TICK_WAIT_QUEUE_LEN)
00000a  2164              MOVS     r1,#0x64
00000c  1a71              SUBS     r1,r6,r1
00000e  f1770000          SBCS     r0,r7,#0
000012  d301              BCC      |L5.24|
                  |L5.20|
;;;62             return;
;;;63     
;;;64         uint64_t i, counted = 0;
;;;65     
;;;66         for (i = 0; i < MAX_DELAY_QUEUE_LEN; i++)
;;;67         {
;;;68             if (delay_record.queue[i].exist)
;;;69             {
;;;70                 counted++;
;;;71     
;;;72                 if (delay_record.queue[i].reg_identifier == reg_identifier)
;;;73                 {
;;;74                     delay_record.queue[i].finnish = 1;
;;;75                     tick_unreg(delay_record.queue[i].reg_identifier);
;;;76                     delay_record.delay_queue_num--;
;;;77                     return;
;;;78                 }
;;;79     
;;;80                 if (counted == delay_record.delay_queue_num)
;;;81                     return;
;;;82             }
;;;83         }
;;;84     }
000014  e8bd87f0          POP      {r4-r10,pc}
                  |L5.24|
000018  f04f0800          MOV      r8,#0                 ;64
00001c  46c1              MOV      r9,r8                 ;64
00001e  2400              MOVS     r4,#0                 ;66
000020  4625              MOV      r5,r4                 ;66
000022  e040              B        |L5.166|
                  |L5.36|
000024  eb040144          ADD      r1,r4,r4,LSL #1       ;68
000028  4822              LDR      r0,|L5.180|
00002a  f8100031          LDRB     r0,[r0,r1,LSL #3]     ;68
00002e  b3b0              CBZ      r0,|L5.158|
000030  2301              MOVS     r3,#1                 ;70
000032  eb180803          ADDS     r8,r8,r3              ;70
000036  f1490900          ADC      r9,r9,#0              ;70
00003a  eb040144          ADD      r1,r4,r4,LSL #1       ;72
00003e  481d              LDR      r0,|L5.180|
000040  eb0001c1          ADD      r1,r0,r1,LSL #3       ;72
000044  e9d10102          LDRD     r0,r1,[r1,#8]         ;72
000048  4070              EORS     r0,r0,r6              ;72
00004a  4079              EORS     r1,r1,r7              ;72
00004c  4308              ORRS     r0,r0,r1              ;72
00004e  d11c              BNE      |L5.138|
000050  2101              MOVS     r1,#1                 ;74
000052  eb040244          ADD      r2,r4,r4,LSL #1       ;74
000056  4817              LDR      r0,|L5.180|
000058  eb0000c2          ADD      r0,r0,r2,LSL #3       ;74
00005c  7401              STRB     r1,[r0,#0x10]         ;74
00005e  eb040144          ADD      r1,r4,r4,LSL #1       ;75
000062  4814              LDR      r0,|L5.180|
000064  eb0001c1          ADD      r1,r0,r1,LSL #3       ;75
000068  e9d12102          LDRD     r2,r1,[r1,#8]         ;75
00006c  4610              MOV      r0,r2                 ;75
00006e  f7fffffe          BL       tick_unreg
000072  4810              LDR      r0,|L5.180|
000074  3808              SUBS     r0,r0,#8              ;76
000076  e9d03000          LDRD     r3,r0,[r0,#0]         ;76
00007a  1e5a              SUBS     r2,r3,#1              ;76
00007c  f1600000          SBC      r0,r0,#0              ;76
000080  490c              LDR      r1,|L5.180|
000082  3908              SUBS     r1,r1,#8              ;76
000084  e9c12000          STRD     r2,r0,[r1,#0]         ;76
000088  e7c4              B        |L5.20|
                  |L5.138|
00008a  490a              LDR      r1,|L5.180|
00008c  3908              SUBS     r1,r1,#8              ;80
00008e  c903              LDM      r1,{r0,r1}            ;80
000090  ea880000          EOR      r0,r8,r0              ;80
000094  ea890101          EOR      r1,r9,r1              ;80
000098  4308              ORRS     r0,r0,r1              ;80
00009a  d101              BNE      |L5.160|
00009c  e7ba              B        |L5.20|
                  |L5.158|
00009e  e7ff              B        |L5.160|
                  |L5.160|
0000a0  1c64              ADDS     r4,r4,#1              ;66
0000a2  f1450500          ADC      r5,r5,#0              ;66
                  |L5.166|
0000a6  2132              MOVS     r1,#0x32              ;66
0000a8  1a61              SUBS     r1,r4,r1              ;66
0000aa  f1750000          SBCS     r0,r5,#0              ;66
0000ae  d3b9              BCC      |L5.36|
0000b0  bf00              NOP      
0000b2  e7af              B        |L5.20|
;;;85     
                          ENDP

                  |L5.180|
                          DCD      delay_record+0x8

                          AREA ||i.systick_delay||, CODE, READONLY, ALIGN=2

                  systick_delay PROC
;;;86     
;;;87     int systick_delay(uint64_t time)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;88     {
000004  4680              MOV      r8,r0
000006  4689              MOV      r9,r1
;;;89         uint64_t i;
;;;90     
;;;91         for (i = 0; i < MAX_DELAY_QUEUE_LEN; i++)
000008  2100              MOVS     r1,#0
00000a  460c              MOV      r4,r1
00000c  460d              MOV      r5,r1
00000e  e009              B        |L6.36|
                  |L6.16|
;;;92         {
;;;93             if (!delay_record.queue[i].exist)
000010  eb040144          ADD      r1,r4,r4,LSL #1
000014  482b              LDR      r0,|L6.196|
000016  f8100031          LDRB     r0,[r0,r1,LSL #3]
00001a  b900              CBNZ     r0,|L6.30|
;;;94                 break;
00001c  e007              B        |L6.46|
                  |L6.30|
00001e  1c64              ADDS     r4,r4,#1              ;91
000020  f1450500          ADC      r5,r5,#0              ;91
                  |L6.36|
000024  2132              MOVS     r1,#0x32              ;91
000026  1a61              SUBS     r1,r4,r1              ;91
000028  f1750000          SBCS     r0,r5,#0              ;91
00002c  d3f0              BCC      |L6.16|
                  |L6.46|
00002e  bf00              NOP      
;;;95         }
;;;96     
;;;97         if (i >= MAX_DELAY_QUEUE_LEN)
000030  2132              MOVS     r1,#0x32
000032  1a61              SUBS     r1,r4,r1
000034  f1750000          SBCS     r0,r5,#0
000038  d303              BCC      |L6.66|
;;;98             return -1;
00003a  f04f30ff          MOV      r0,#0xffffffff
                  |L6.62|
;;;99     
;;;100        delay_record.queue[i].finnish = 0;
;;;101        uint64_t reg_identifier = tick_reg(time,
;;;102                                           delay_timer_handler, NULL);
;;;103    
;;;104        if (reg_identifier == MAX_TICK_WAIT_QUEUE_LEN)
;;;105            return -1;
;;;106    
;;;107        delay_record.delay_queue_num++;
;;;108        delay_record.queue[i].reg_identifier = reg_identifier;
;;;109        delay_record.queue[i].exist = 1;
;;;110    
;;;111        while (!delay_record.queue[i].finnish);
;;;112    
;;;113        memset(&delay_record.queue[i], 0, sizeof(delay_unit));
;;;114    
;;;115        return 0;
;;;116    }
00003e  e8bd87f0          POP      {r4-r10,pc}
                  |L6.66|
000042  2100              MOVS     r1,#0                 ;100
000044  eb040244          ADD      r2,r4,r4,LSL #1       ;100
000048  481e              LDR      r0,|L6.196|
00004a  eb0000c2          ADD      r0,r0,r2,LSL #3       ;100
00004e  7401              STRB     r1,[r0,#0x10]         ;100
000050  2300              MOVS     r3,#0                 ;101
000052  4a1d              LDR      r2,|L6.200|
000054  4640              MOV      r0,r8                 ;101
000056  4649              MOV      r1,r9                 ;101
000058  f7fffffe          BL       tick_reg
00005c  4606              MOV      r6,r0                 ;101
00005e  460f              MOV      r7,r1                 ;101
000060  2364              MOVS     r3,#0x64              ;104
000062  ea860003          EOR      r0,r6,r3              ;104
000066  4338              ORRS     r0,r0,r7              ;104
000068  d101              BNE      |L6.110|
00006a  1e40              SUBS     r0,r0,#1              ;105
00006c  e7e7              B        |L6.62|
                  |L6.110|
00006e  4815              LDR      r0,|L6.196|
000070  3808              SUBS     r0,r0,#8              ;107
000072  e9d03000          LDRD     r3,r0,[r0,#0]         ;107
000076  1c59              ADDS     r1,r3,#1              ;107
000078  f1400000          ADC      r0,r0,#0              ;107
00007c  4a11              LDR      r2,|L6.196|
00007e  3a08              SUBS     r2,r2,#8              ;107
000080  e9c21000          STRD     r1,r0,[r2,#0]         ;107
000084  eb040144          ADD      r1,r4,r4,LSL #1       ;108
000088  480e              LDR      r0,|L6.196|
00008a  eb0000c1          ADD      r0,r0,r1,LSL #3       ;108
00008e  e9c06702          STRD     r6,r7,[r0,#8]         ;108
000092  2101              MOVS     r1,#1                 ;109
000094  eb040244          ADD      r2,r4,r4,LSL #1       ;109
000098  480a              LDR      r0,|L6.196|
00009a  f8001032          STRB     r1,[r0,r2,LSL #3]     ;109
00009e  bf00              NOP                            ;111
                  |L6.160|
0000a0  eb040144          ADD      r1,r4,r4,LSL #1       ;111
0000a4  4807              LDR      r0,|L6.196|
0000a6  eb0000c1          ADD      r0,r0,r1,LSL #3       ;111
0000aa  7c00              LDRB     r0,[r0,#0x10]         ;111
0000ac  2800              CMP      r0,#0                 ;111
0000ae  d0f7              BEQ      |L6.160|
0000b0  eb040244          ADD      r2,r4,r4,LSL #1       ;113
0000b4  4903              LDR      r1,|L6.196|
0000b6  eb0100c2          ADD      r0,r1,r2,LSL #3       ;113
0000ba  2118              MOVS     r1,#0x18              ;113
0000bc  f7fffffe          BL       __aeabi_memclr4
0000c0  2000              MOVS     r0,#0                 ;115
0000c2  e7bc              B        |L6.62|
;;;117    
                          ENDP

                  |L6.196|
                          DCD      delay_record+0x8
                  |L6.200|
                          DCD      delay_timer_handler

                          AREA ||i.tick_reg||, CODE, READONLY, ALIGN=2

                  tick_reg PROC
;;;7      // return MAX_TICK_WAIT_QUEUE_LEN when no space
;;;8      uint64_t tick_reg(uint64_t time,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;9                        void (* reg_func)(uint64_t reg_identifier, void* message),
;;;10                       void* message)
;;;11     {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4691              MOV      r9,r2
00000a  469a              MOV      r10,r3
;;;12         tick_wait_unit* new_unit;
;;;13         uint64_t count;
;;;14     
;;;15         for (count = 0; count < MAX_TICK_WAIT_QUEUE_LEN; count++)
00000c  2100              MOVS     r1,#0
00000e  460c              MOV      r4,r1
000010  460d              MOV      r5,r1
000012  e008              B        |L7.38|
                  |L7.20|
;;;16         {
;;;17             if (!tick_wait_record.queue[count].exist)
000014  481d              LDR      r0,|L7.140|
000016  eb001044          ADD      r0,r0,r4,LSL #5
00001a  7800              LDRB     r0,[r0,#0]
00001c  b900              CBNZ     r0,|L7.32|
;;;18                 break;
00001e  e007              B        |L7.48|
                  |L7.32|
000020  1c64              ADDS     r4,r4,#1              ;15
000022  f1450500          ADC      r5,r5,#0              ;15
                  |L7.38|
000026  2164              MOVS     r1,#0x64              ;15
000028  1a61              SUBS     r1,r4,r1              ;15
00002a  f1750000          SBCS     r0,r5,#0              ;15
00002e  d3f1              BCC      |L7.20|
                  |L7.48|
000030  bf00              NOP      
;;;19         }
;;;20     
;;;21         if (count >= MAX_TICK_WAIT_QUEUE_LEN)
000032  2164              MOVS     r1,#0x64
000034  1a61              SUBS     r1,r4,r1
000036  f1750000          SBCS     r0,r5,#0
00003a  d303              BCC      |L7.68|
;;;22             return MAX_TICK_WAIT_QUEUE_LEN;
00003c  2064              MOVS     r0,#0x64
00003e  2100              MOVS     r1,#0
                  |L7.64|
;;;23     
;;;24         new_unit = &tick_wait_record.queue[count];
;;;25     
;;;26         new_unit->time = time;
;;;27         new_unit->next_remain_time = time;
;;;28         new_unit->reg_func = reg_func;
;;;29         new_unit->message = message;
;;;30         tick_wait_record.reg_num++;
;;;31         new_unit->exist = 1;
;;;32     
;;;33         if (tick_wait_record.reg_num == 1)
;;;34             SysTick_Config(72000);
;;;35     
;;;36         return count;
;;;37     }
000040  e8bd87f0          POP      {r4-r10,pc}
                  |L7.68|
000044  4811              LDR      r0,|L7.140|
000046  eb001644          ADD      r6,r0,r4,LSL #5       ;24
00004a  e9c67802          STRD     r7,r8,[r6,#8]         ;26
00004e  e9c67804          STRD     r7,r8,[r6,#0x10]      ;27
000052  f8c69018          STR      r9,[r6,#0x18]         ;28
000056  f8c6a01c          STR      r10,[r6,#0x1c]        ;29
00005a  3808              SUBS     r0,r0,#8              ;30
00005c  e9d02000          LDRD     r2,r0,[r0,#0]         ;30
000060  1c52              ADDS     r2,r2,#1              ;30
000062  f1400000          ADC      r0,r0,#0              ;30
000066  4909              LDR      r1,|L7.140|
000068  3908              SUBS     r1,r1,#8              ;30
00006a  e9c12000          STRD     r2,r0,[r1,#0]         ;30
00006e  2001              MOVS     r0,#1                 ;31
000070  7030              STRB     r0,[r6,#0]            ;31
000072  4608              MOV      r0,r1                 ;33
000074  e9d01000          LDRD     r1,r0,[r0,#0]         ;33
000078  2301              MOVS     r3,#1                 ;33
00007a  4059              EORS     r1,r1,r3              ;33
00007c  4301              ORRS     r1,r1,r0              ;33
00007e  d102              BNE      |L7.134|
000080  4803              LDR      r0,|L7.144|
000082  f7fffffe          BL       SysTick_Config
                  |L7.134|
000086  4620              MOV      r0,r4                 ;36
000088  4629              MOV      r1,r5                 ;36
00008a  e7d9              B        |L7.64|
;;;38     
                          ENDP

                  |L7.140|
                          DCD      tick_wait_record+0x8
                  |L7.144|
                          DCD      0x00011940

                          AREA ||i.tick_unreg||, CODE, READONLY, ALIGN=2

                  tick_unreg PROC
;;;38     
;;;39     int tick_unreg(uint64_t reg_identifier)
000000  b570              PUSH     {r4-r6,lr}
;;;40     {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;41         if (reg_identifier >= MAX_TICK_WAIT_QUEUE_LEN)
000006  2164              MOVS     r1,#0x64
000008  1a61              SUBS     r1,r4,r1
00000a  f1750000          SBCS     r0,r5,#0
00000e  d302              BCC      |L8.22|
;;;42             return -1;
000010  f04f30ff          MOV      r0,#0xffffffff
                  |L8.20|
;;;43     
;;;44         if (!tick_wait_record.queue[reg_identifier].exist)
;;;45             return 0;
;;;46     
;;;47         memset(&tick_wait_record.queue[reg_identifier], 0,
;;;48                sizeof(tick_wait_unit));
;;;49         tick_wait_record.reg_num--;
;;;50     
;;;51         if (tick_wait_record.reg_num == 0)
;;;52             SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
;;;53     
;;;54         return 0;
;;;55     }
000014  bd70              POP      {r4-r6,pc}
                  |L8.22|
000016  4815              LDR      r0,|L8.108|
000018  eb001044          ADD      r0,r0,r4,LSL #5       ;44
00001c  7800              LDRB     r0,[r0,#0]            ;44
00001e  b908              CBNZ     r0,|L8.36|
000020  2000              MOVS     r0,#0                 ;45
000022  e7f7              B        |L8.20|
                  |L8.36|
000024  4911              LDR      r1,|L8.108|
000026  eb011044          ADD      r0,r1,r4,LSL #5       ;47
00002a  2120              MOVS     r1,#0x20              ;47
00002c  f7fffffe          BL       __aeabi_memclr4
000030  480e              LDR      r0,|L8.108|
000032  3808              SUBS     r0,r0,#8              ;49
000034  e9d01000          LDRD     r1,r0,[r0,#0]         ;49
000038  1e49              SUBS     r1,r1,#1              ;49
00003a  f1600000          SBC      r0,r0,#0              ;49
00003e  4a0b              LDR      r2,|L8.108|
000040  3a08              SUBS     r2,r2,#8              ;49
000042  e9c21000          STRD     r1,r0,[r2,#0]         ;49
000046  4610              MOV      r0,r2                 ;51
000048  e9d01000          LDRD     r1,r0,[r0,#0]         ;51
00004c  2200              MOVS     r2,#0                 ;51
00004e  4051              EORS     r1,r1,r2              ;51
000050  4050              EORS     r0,r0,r2              ;51
000052  4301              ORRS     r1,r1,r0              ;51
000054  d107              BNE      |L8.102|
000056  f04f20e0          MOV      r0,#0xe000e000        ;52
00005a  6900              LDR      r0,[r0,#0x10]         ;52
00005c  f0200001          BIC      r0,r0,#1              ;52
000060  f04f21e0          MOV      r1,#0xe000e000        ;52
000064  6108              STR      r0,[r1,#0x10]         ;52
                  |L8.102|
000066  2000              MOVS     r0,#0                 ;54
000068  e7d4              B        |L8.20|
;;;56     
                          ENDP

00006a  0000              DCW      0x0000
                  |L8.108|
                          DCD      tick_wait_record+0x8

                          AREA ||i.timeout_handler||, CODE, READONLY, ALIGN=1

                  timeout_handler PROC
;;;117    
;;;118    void timeout_handler(uint64_t reg_identifier, void* flag)
000000  b570              PUSH     {r4-r6,lr}
;;;119    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;120        *(uint8_t*)flag = 1;
000008  2001              MOVS     r0,#1
00000a  7020              STRB     r0,[r4,#0]
;;;121        tick_unreg(reg_identifier);
00000c  4628              MOV      r0,r5
00000e  4631              MOV      r1,r6
000010  f7fffffe          BL       tick_unreg
;;;122    }
000014  bd70              POP      {r4-r6,pc}
;;;123    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  delay_record
                          %        1208
                  tick_wait_record
                          %        3208
