; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o..\out\led_display.o --asm_dir=..\list\ --list_dir=..\list\ --depend=..\out\led_display.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\src -I..\lib\STM32F10x_StdPeriph_Driver\inc -I..\lib\CMSIS\CM3\CoreSupport -I..\lib\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=528 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=..\out\led_display.crf ..\src\display\led_display.c]
                          THUMB

                          AREA ||i.delay_s||, CODE, READONLY, ALIGN=1

                  delay_s PROC
;;;2      
;;;3      static void delay_s(uint64_t time)
000000  b530              PUSH     {r4,r5,lr}
;;;4      {
;;;5          for (; time > 0; time--);
000002  e002              B        |L1.10|
                  |L1.4|
000004  1e40              SUBS     r0,r0,#1
000006  f1610100          SBC      r1,r1,#0
                  |L1.10|
00000a  2300              MOVS     r3,#0
00000c  ea800203          EOR      r2,r0,r3
000010  404b              EORS     r3,r3,r1
000012  431a              ORRS     r2,r2,r3
000014  d1f6              BNE      |L1.4|
;;;6      }
000016  bd30              POP      {r4,r5,pc}
;;;7      
                          ENDP


                          AREA ||i.e_reset||, CODE, READONLY, ALIGN=2

                  e_reset PROC
;;;121    
;;;122    static void e_reset(void)
000000  b510              PUSH     {r4,lr}
;;;123    {
;;;124        GPIO_ResetBits(LED_DIS_PORT, E_PIN);
000002  f44f5180          MOV      r1,#0x1000
000006  4802              LDR      r0,|L2.16|
000008  f7fffffe          BL       GPIO_ResetBits
;;;125    }
00000c  bd10              POP      {r4,pc}
;;;126    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0x40011800

                          AREA ||i.e_set||, CODE, READONLY, ALIGN=2

                  e_set PROC
;;;116    
;;;117    static void e_set(void)
000000  b510              PUSH     {r4,lr}
;;;118    {
;;;119        GPIO_SetBits(LED_DIS_PORT, E_PIN);
000002  f44f5180          MOV      r1,#0x1000
000006  4802              LDR      r0,|L3.16|
000008  f7fffffe          BL       GPIO_SetBits
;;;120    }
00000c  bd10              POP      {r4,pc}
;;;121    
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0x40011800

                          AREA ||i.init_led_display||, CODE, READONLY, ALIGN=2

                  init_led_display PROC
;;;7      
;;;8      void init_led_display(void)
000000  b508              PUSH     {r3,lr}
;;;9      {
;;;10         GPIO_InitTypeDef gpio_init_type;
;;;11     
;;;12         RCC_APB2PeriphClockCmd(LED_DIS_RCC, ENABLE);
000002  2101              MOVS     r1,#1
000004  2040              MOVS     r0,#0x40
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;13     
;;;14         gpio_init_type.GPIO_Mode = GPIO_Mode_Out_PP;
00000a  2010              MOVS     r0,#0x10
00000c  f88d0003          STRB     r0,[sp,#3]
;;;15         gpio_init_type.GPIO_Speed = GPIO_Speed_10MHz;
000010  2001              MOVS     r0,#1
000012  f88d0002          STRB     r0,[sp,#2]
;;;16     
;;;17         gpio_init_type.GPIO_Pin =  RS_PIN;
000016  0200              LSLS     r0,r0,#8
000018  f8ad0000          STRH     r0,[sp,#0]
;;;18         GPIO_Init(LED_DIS_PORT, &gpio_init_type);
00001c  4669              MOV      r1,sp
00001e  4816              LDR      r0,|L4.120|
000020  f7fffffe          BL       GPIO_Init
;;;19         gpio_init_type.GPIO_Pin =  RW_PIN;
000024  f44f6000          MOV      r0,#0x800
000028  f8ad0000          STRH     r0,[sp,#0]
;;;20         GPIO_Init(LED_DIS_PORT, &gpio_init_type);
00002c  4669              MOV      r1,sp
00002e  4812              LDR      r0,|L4.120|
000030  f7fffffe          BL       GPIO_Init
;;;21         gpio_init_type.GPIO_Pin =  E_PIN;
000034  f44f5080          MOV      r0,#0x1000
000038  f8ad0000          STRH     r0,[sp,#0]
;;;22         GPIO_Init(LED_DIS_PORT, &gpio_init_type);
00003c  4669              MOV      r1,sp
00003e  480e              LDR      r0,|L4.120|
000040  f7fffffe          BL       GPIO_Init
;;;23     
;;;24         write_cmd_byte_no_wait(0x38);
000044  2038              MOVS     r0,#0x38
000046  f7fffffe          BL       write_cmd_byte_no_wait
;;;25         delay_s(0x2FF);
00004a  f24020ff          MOV      r0,#0x2ff
00004e  2100              MOVS     r1,#0
000050  f7fffffe          BL       delay_s
;;;26         write_cmd_byte_no_wait(0x38);
000054  2038              MOVS     r0,#0x38
000056  f7fffffe          BL       write_cmd_byte_no_wait
;;;27         delay_s(0x2FF);
00005a  f24020ff          MOV      r0,#0x2ff
00005e  2100              MOVS     r1,#0
000060  f7fffffe          BL       delay_s
;;;28         write_cmd_byte_no_wait(0x38);
000064  2038              MOVS     r0,#0x38
000066  f7fffffe          BL       write_cmd_byte_no_wait
;;;29         delay_s(0x2FF);
00006a  f24020ff          MOV      r0,#0x2ff
00006e  2100              MOVS     r1,#0
000070  f7fffffe          BL       delay_s
;;;30     }
000074  bd08              POP      {r3,pc}
;;;31     
                          ENDP

000076  0000              DCW      0x0000
                  |L4.120|
                          DCD      0x40011800

                          AREA ||i.read_data||, CODE, READONLY, ALIGN=2

                  read_data PROC
;;;67     
;;;68     static uint8_t read_data(void)
000000  b510              PUSH     {r4,lr}
;;;69     {
;;;70         start_read_data();
000002  f7fffffe          BL       start_read_data
;;;71         uint8_t data = (0xFF & GPIO_ReadInputData(LED_DIS_PORT));
000006  4803              LDR      r0,|L5.20|
000008  f7fffffe          BL       GPIO_ReadInputData
00000c  b2c4              UXTB     r4,r0
;;;72         return data;
00000e  4620              MOV      r0,r4
;;;73     }
000010  bd10              POP      {r4,pc}
;;;74     
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      0x40011800

                          AREA ||i.read_data_byte||, CODE, READONLY, ALIGN=1

                  read_data_byte PROC
;;;148    
;;;149    uint8_t read_data_byte(void)
000000  b510              PUSH     {r4,lr}
;;;150    {
;;;151        uint8_t data;
;;;152    
;;;153        wait_bf();
000002  f7fffffe          BL       wait_bf
;;;154    
;;;155        rs_set();
000006  f7fffffe          BL       rs_set
;;;156        rw_set();
00000a  f7fffffe          BL       rw_set
;;;157        delay_s(0x1F);
00000e  201f              MOVS     r0,#0x1f
000010  2100              MOVS     r1,#0
000012  f7fffffe          BL       delay_s
;;;158        e_set();
000016  f7fffffe          BL       e_set
;;;159        delay_s(0x5F);
00001a  205f              MOVS     r0,#0x5f
00001c  2100              MOVS     r1,#0
00001e  f7fffffe          BL       delay_s
;;;160        data = read_data();
000022  f7fffffe          BL       read_data
000026  4604              MOV      r4,r0
;;;161        delay_s(0x1F);
000028  201f              MOVS     r0,#0x1f
00002a  2100              MOVS     r1,#0
00002c  f7fffffe          BL       delay_s
;;;162        e_reset();
000030  f7fffffe          BL       e_reset
;;;163    
;;;164        return data;
000034  4620              MOV      r0,r4
;;;165    }
000036  bd10              POP      {r4,pc}
;;;166    
                          ENDP


                          AREA ||i.read_status_byte||, CODE, READONLY, ALIGN=1

                  read_status_byte PROC
;;;132    
;;;133    uint8_t read_status_byte(void)
000000  b510              PUSH     {r4,lr}
;;;134    {
;;;135        uint8_t data;
;;;136    
;;;137        rs_reset();
000002  f7fffffe          BL       rs_reset
;;;138        rw_set();
000006  f7fffffe          BL       rw_set
;;;139        delay_s(0x1F);
00000a  201f              MOVS     r0,#0x1f
00000c  2100              MOVS     r1,#0
00000e  f7fffffe          BL       delay_s
;;;140        e_set();
000012  f7fffffe          BL       e_set
;;;141        delay_s(0x5F);
000016  205f              MOVS     r0,#0x5f
000018  2100              MOVS     r1,#0
00001a  f7fffffe          BL       delay_s
;;;142        data = read_data();
00001e  f7fffffe          BL       read_data
000022  4604              MOV      r4,r0
;;;143        delay_s(0x1F);
000024  201f              MOVS     r0,#0x1f
000026  2100              MOVS     r1,#0
000028  f7fffffe          BL       delay_s
;;;144        e_reset();
00002c  f7fffffe          BL       e_reset
;;;145    
;;;146        return data;
000030  4620              MOV      r0,r4
;;;147    }
000032  bd10              POP      {r4,pc}
;;;148    
                          ENDP


                          AREA ||i.rs_reset||, CODE, READONLY, ALIGN=2

                  rs_reset PROC
;;;101    
;;;102    static void rs_reset(void)
000000  b510              PUSH     {r4,lr}
;;;103    {
;;;104        GPIO_ResetBits(LED_DIS_PORT, RS_PIN);
000002  f44f7180          MOV      r1,#0x100
000006  4802              LDR      r0,|L8.16|
000008  f7fffffe          BL       GPIO_ResetBits
;;;105    }
00000c  bd10              POP      {r4,pc}
;;;106    
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
                          DCD      0x40011800

                          AREA ||i.rs_set||, CODE, READONLY, ALIGN=2

                  rs_set PROC
;;;96     
;;;97     static void rs_set(void)
000000  b510              PUSH     {r4,lr}
;;;98     {
;;;99         GPIO_SetBits(LED_DIS_PORT, RS_PIN);
000002  f44f7180          MOV      r1,#0x100
000006  4802              LDR      r0,|L9.16|
000008  f7fffffe          BL       GPIO_SetBits
;;;100    }
00000c  bd10              POP      {r4,pc}
;;;101    
                          ENDP

00000e  0000              DCW      0x0000
                  |L9.16|
                          DCD      0x40011800

                          AREA ||i.rw_reset||, CODE, READONLY, ALIGN=2

                  rw_reset PROC
;;;111    
;;;112    static void rw_reset(void)
000000  b510              PUSH     {r4,lr}
;;;113    {
;;;114        GPIO_ResetBits(LED_DIS_PORT, RW_PIN);
000002  f44f6100          MOV      r1,#0x800
000006  4802              LDR      r0,|L10.16|
000008  f7fffffe          BL       GPIO_ResetBits
;;;115    }
00000c  bd10              POP      {r4,pc}
;;;116    
                          ENDP

00000e  0000              DCW      0x0000
                  |L10.16|
                          DCD      0x40011800

                          AREA ||i.rw_set||, CODE, READONLY, ALIGN=2

                  rw_set PROC
;;;106    
;;;107    static void rw_set(void)
000000  b510              PUSH     {r4,lr}
;;;108    {
;;;109        GPIO_SetBits(LED_DIS_PORT, RW_PIN);
000002  f44f6100          MOV      r1,#0x800
000006  4802              LDR      r0,|L11.16|
000008  f7fffffe          BL       GPIO_SetBits
;;;110    }
00000c  bd10              POP      {r4,pc}
;;;111    
                          ENDP

00000e  0000              DCW      0x0000
                  |L11.16|
                          DCD      0x40011800

                          AREA ||i.set_data_pin_gpio||, CODE, READONLY, ALIGN=2

                  set_data_pin_gpio PROC
;;;31     
;;;32     static void set_data_pin_gpio(GPIO_InitTypeDef*
000000  b510              PUSH     {r4,lr}
;;;33                                   gpio_init_type)
;;;34     {
000002  4604              MOV      r4,r0
;;;35         gpio_init_type->GPIO_Pin =  D0_PIN;
000004  2001              MOVS     r0,#1
000006  8020              STRH     r0,[r4,#0]
;;;36         GPIO_Init(LED_DIS_PORT, gpio_init_type);
000008  4621              MOV      r1,r4
00000a  4817              LDR      r0,|L12.104|
00000c  f7fffffe          BL       GPIO_Init
;;;37         gpio_init_type->GPIO_Pin =  D1_PIN;
000010  2002              MOVS     r0,#2
000012  8020              STRH     r0,[r4,#0]
;;;38         GPIO_Init(LED_DIS_PORT, gpio_init_type);
000014  4621              MOV      r1,r4
000016  4814              LDR      r0,|L12.104|
000018  f7fffffe          BL       GPIO_Init
;;;39         gpio_init_type->GPIO_Pin =  D2_PIN;
00001c  2004              MOVS     r0,#4
00001e  8020              STRH     r0,[r4,#0]
;;;40         GPIO_Init(LED_DIS_PORT, gpio_init_type);
000020  4621              MOV      r1,r4
000022  4811              LDR      r0,|L12.104|
000024  f7fffffe          BL       GPIO_Init
;;;41         gpio_init_type->GPIO_Pin =  D3_PIN;
000028  2008              MOVS     r0,#8
00002a  8020              STRH     r0,[r4,#0]
;;;42         GPIO_Init(LED_DIS_PORT, gpio_init_type);
00002c  4621              MOV      r1,r4
00002e  480e              LDR      r0,|L12.104|
000030  f7fffffe          BL       GPIO_Init
;;;43         gpio_init_type->GPIO_Pin =  D4_PIN;
000034  2010              MOVS     r0,#0x10
000036  8020              STRH     r0,[r4,#0]
;;;44         GPIO_Init(LED_DIS_PORT, gpio_init_type);
000038  4621              MOV      r1,r4
00003a  480b              LDR      r0,|L12.104|
00003c  f7fffffe          BL       GPIO_Init
;;;45         gpio_init_type->GPIO_Pin =  D5_PIN;
000040  2020              MOVS     r0,#0x20
000042  8020              STRH     r0,[r4,#0]
;;;46         GPIO_Init(LED_DIS_PORT, gpio_init_type);
000044  4621              MOV      r1,r4
000046  4808              LDR      r0,|L12.104|
000048  f7fffffe          BL       GPIO_Init
;;;47         gpio_init_type->GPIO_Pin =  D6_PIN;
00004c  2040              MOVS     r0,#0x40
00004e  8020              STRH     r0,[r4,#0]
;;;48         GPIO_Init(LED_DIS_PORT, gpio_init_type);
000050  4621              MOV      r1,r4
000052  4805              LDR      r0,|L12.104|
000054  f7fffffe          BL       GPIO_Init
;;;49         gpio_init_type->GPIO_Pin =  D7_PIN;
000058  2080              MOVS     r0,#0x80
00005a  8020              STRH     r0,[r4,#0]
;;;50         GPIO_Init(LED_DIS_PORT, gpio_init_type);
00005c  4621              MOV      r1,r4
00005e  4802              LDR      r0,|L12.104|
000060  f7fffffe          BL       GPIO_Init
;;;51     }
000064  bd10              POP      {r4,pc}
;;;52     
                          ENDP

000066  0000              DCW      0x0000
                  |L12.104|
                          DCD      0x40011800

                          AREA ||i.start_read_data||, CODE, READONLY, ALIGN=1

                  start_read_data PROC
;;;52     
;;;53     static void start_read_data(void)
000000  b508              PUSH     {r3,lr}
;;;54     {
;;;55         GPIO_InitTypeDef gpio_init_type;
;;;56         gpio_init_type.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000002  2004              MOVS     r0,#4
000004  f88d0003          STRB     r0,[sp,#3]
;;;57         set_data_pin_gpio(&gpio_init_type);
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       set_data_pin_gpio
;;;58     }
00000e  bd08              POP      {r3,pc}
;;;59     
                          ENDP


                          AREA ||i.start_write_data||, CODE, READONLY, ALIGN=1

                  start_write_data PROC
;;;59     
;;;60     static void start_write_data(void)
000000  b508              PUSH     {r3,lr}
;;;61     {
;;;62         GPIO_InitTypeDef gpio_init_type;
;;;63         gpio_init_type.GPIO_Mode = GPIO_Mode_Out_PP;
000002  2010              MOVS     r0,#0x10
000004  f88d0003          STRB     r0,[sp,#3]
;;;64         gpio_init_type.GPIO_Speed = GPIO_Speed_10MHz;
000008  2001              MOVS     r0,#1
00000a  f88d0002          STRB     r0,[sp,#2]
;;;65         set_data_pin_gpio(&gpio_init_type);
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       set_data_pin_gpio
;;;66     }
000014  bd08              POP      {r3,pc}
;;;67     
                          ENDP


                          AREA ||i.wait_bf||, CODE, READONLY, ALIGN=1

                  wait_bf PROC
;;;126    
;;;127    void wait_bf(void)
000000  b510              PUSH     {r4,lr}
;;;128    {
;;;129        while (read_status_byte() & BF_BIT);
000002  bf00              NOP      
                  |L15.4|
000004  f7fffffe          BL       read_status_byte
000008  f0000080          AND      r0,r0,#0x80
00000c  2800              CMP      r0,#0
00000e  d1f9              BNE      |L15.4|
;;;130    }
000010  bd10              POP      {r4,pc}
;;;131    
                          ENDP


                          AREA ||i.write_cmd_byte||, CODE, READONLY, ALIGN=1

                  write_cmd_byte PROC
;;;166    
;;;167    void write_cmd_byte(uint8_t data)
000000  b510              PUSH     {r4,lr}
;;;168    {
000002  4604              MOV      r4,r0
;;;169        wait_bf();
000004  f7fffffe          BL       wait_bf
;;;170        rs_reset();
000008  f7fffffe          BL       rs_reset
;;;171        rw_reset();
00000c  f7fffffe          BL       rw_reset
;;;172        write_data(data);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       write_data
;;;173        delay_s(0x3F);
000016  203f              MOVS     r0,#0x3f
000018  2100              MOVS     r1,#0
00001a  f7fffffe          BL       delay_s
;;;174        e_set();
00001e  f7fffffe          BL       e_set
;;;175        delay_s(0x5F);
000022  205f              MOVS     r0,#0x5f
000024  2100              MOVS     r1,#0
000026  f7fffffe          BL       delay_s
;;;176        e_reset();
00002a  f7fffffe          BL       e_reset
;;;177        delay_s(0x1F);
00002e  201f              MOVS     r0,#0x1f
000030  2100              MOVS     r1,#0
000032  f7fffffe          BL       delay_s
;;;178    }
000036  bd10              POP      {r4,pc}
;;;179    
                          ENDP


                          AREA ||i.write_cmd_byte_no_wait||, CODE, READONLY, ALIGN=1

                  write_cmd_byte_no_wait PROC
;;;179    
;;;180    void write_cmd_byte_no_wait(uint8_t data)
000000  b510              PUSH     {r4,lr}
;;;181    {
000002  4604              MOV      r4,r0
;;;182        rs_reset();
000004  f7fffffe          BL       rs_reset
;;;183        rw_reset();
000008  f7fffffe          BL       rw_reset
;;;184        write_data(data);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       write_data
;;;185        delay_s(0x3F);
000012  203f              MOVS     r0,#0x3f
000014  2100              MOVS     r1,#0
000016  f7fffffe          BL       delay_s
;;;186        e_set();
00001a  f7fffffe          BL       e_set
;;;187        delay_s(0x5F);
00001e  205f              MOVS     r0,#0x5f
000020  2100              MOVS     r1,#0
000022  f7fffffe          BL       delay_s
;;;188        e_reset();
000026  f7fffffe          BL       e_reset
;;;189        delay_s(0x1F);
00002a  201f              MOVS     r0,#0x1f
00002c  2100              MOVS     r1,#0
00002e  f7fffffe          BL       delay_s
;;;190    }
000032  bd10              POP      {r4,pc}
;;;191    
                          ENDP


                          AREA ||i.write_data||, CODE, READONLY, ALIGN=2

                  write_data PROC
;;;74     
;;;75     static void write_data(uint8_t data)
000000  b570              PUSH     {r4-r6,lr}
;;;76     {
000002  4605              MOV      r5,r0
;;;77         start_write_data();
000004  f7fffffe          BL       start_write_data
;;;78         int time = 0;
000008  2400              MOVS     r4,#0
;;;79     
;;;80         for (; time < 8; time++)
00000a  e018              B        |L18.62|
                  |L18.12|
;;;81         {
;;;82             switch (data & 1)
00000c  f0050001          AND      r0,r5,#1
000010  b110              CBZ      r0,|L18.24|
000012  2801              CMP      r0,#1
000014  d110              BNE      |L18.56|
000016  e007              B        |L18.40|
                  |L18.24|
;;;83             {
;;;84             case 0:
;;;85                 GPIO_WriteBit(LED_DIS_PORT, 1 << time, Bit_RESET);
000018  2001              MOVS     r0,#1
00001a  40a0              LSLS     r0,r0,r4
00001c  b281              UXTH     r1,r0
00001e  2200              MOVS     r2,#0
000020  4808              LDR      r0,|L18.68|
000022  f7fffffe          BL       GPIO_WriteBit
;;;86                 break;
000026  e007              B        |L18.56|
                  |L18.40|
;;;87     
;;;88             case 1:
;;;89                 GPIO_WriteBit(LED_DIS_PORT, 1 << time, Bit_SET);
000028  2001              MOVS     r0,#1
00002a  40a0              LSLS     r0,r0,r4
00002c  b281              UXTH     r1,r0
00002e  2201              MOVS     r2,#1
000030  4804              LDR      r0,|L18.68|
000032  f7fffffe          BL       GPIO_WriteBit
;;;90                 break;
000036  bf00              NOP      
                  |L18.56|
000038  bf00              NOP                            ;86
;;;91             }
;;;92     
;;;93             data >>= 1;
00003a  106d              ASRS     r5,r5,#1
00003c  1c64              ADDS     r4,r4,#1              ;80
                  |L18.62|
00003e  2c08              CMP      r4,#8                 ;80
000040  dbe4              BLT      |L18.12|
;;;94         }
;;;95     }
000042  bd70              POP      {r4-r6,pc}
;;;96     
                          ENDP

                  |L18.68|
                          DCD      0x40011800

                          AREA ||i.write_data_byte||, CODE, READONLY, ALIGN=1

                  write_data_byte PROC
;;;191    
;;;192    void write_data_byte(uint8_t data)
000000  b510              PUSH     {r4,lr}
;;;193    {
000002  4604              MOV      r4,r0
;;;194        wait_bf();
000004  f7fffffe          BL       wait_bf
;;;195        rs_set();
000008  f7fffffe          BL       rs_set
;;;196        rw_reset();
00000c  f7fffffe          BL       rw_reset
;;;197        write_data(data);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       write_data
;;;198        delay_s(0x3F);
000016  203f              MOVS     r0,#0x3f
000018  2100              MOVS     r1,#0
00001a  f7fffffe          BL       delay_s
;;;199        e_set();
00001e  f7fffffe          BL       e_set
;;;200        delay_s(0x5F);
000022  205f              MOVS     r0,#0x5f
000024  2100              MOVS     r1,#0
000026  f7fffffe          BL       delay_s
;;;201        e_reset();
00002a  f7fffffe          BL       e_reset
;;;202        delay_s(0x1F);
00002e  201f              MOVS     r0,#0x1f
000030  2100              MOVS     r1,#0
000032  f7fffffe          BL       delay_s
;;;203    }
000036  bd10              POP      {r4,pc}
;;;204    
                          ENDP

