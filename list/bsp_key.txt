; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o..\out\bsp_key.o --asm_dir=..\list\ --list_dir=..\list\ --depend=..\out\bsp_key.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\src -I..\lib\STM32F10x_StdPeriph_Driver\inc -I..\lib\CMSIS\CM3\CoreSupport -I..\lib\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I.\RTE\_Target_1 -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=528 -DSTM32F10X_HD -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DDEBUG --omf_browse=..\out\bsp_key.crf ..\src\key\bsp_key.c]
                          THUMB

                          AREA ||i.exti_config||, CODE, READONLY, ALIGN=1

                  exti_config PROC
;;;26     
;;;27     void exti_config(uint32_t line, EXTIMode_TypeDef mode, EXTITrigger_TypeDef trigger, FunctionalState cmd)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;28     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;29         EXTI_InitTypeDef exti_init_type;
;;;30         exti_init_type.EXTI_Line = line;
00000c  9400              STR      r4,[sp,#0]
;;;31         exti_init_type.EXTI_Mode = mode;
00000e  f88d5004          STRB     r5,[sp,#4]
;;;32         exti_init_type.EXTI_Trigger = trigger;
000012  f88d6005          STRB     r6,[sp,#5]
;;;33         exti_init_type.EXTI_LineCmd = cmd;
000016  f88d7006          STRB     r7,[sp,#6]
;;;34         EXTI_Init(&exti_init_type);
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       EXTI_Init
;;;35     }
000020  e8bd81fc          POP      {r2-r8,pc}
;;;36     
                          ENDP


                          AREA ||i.init_exti||, CODE, READONLY, ALIGN=1

                  init_exti PROC
;;;15     
;;;16     static void init_exti(GPIO_TypeDef* port, uint16_t pin, GPIOMode_TypeDef mode, uint8_t ports, uint8_t pins)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;17     {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
00000c  f8dd8020          LDR      r8,[sp,#0x20]
;;;18         GPIO_InitTypeDef gpio_init_type;
;;;19         
;;;20         gpio_init_type.GPIO_Pin =  pin;
000010  f8ad4000          STRH     r4,[sp,#0]
;;;21         gpio_init_type.GPIO_Mode = mode;
000014  f88d5003          STRB     r5,[sp,#3]
;;;22         GPIO_Init(port, &gpio_init_type);
000018  4669              MOV      r1,sp
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       GPIO_Init
;;;23         
;;;24         GPIO_EXTILineConfig(ports, pins);
000020  4641              MOV      r1,r8
000022  4630              MOV      r0,r6
000024  f7fffffe          BL       GPIO_EXTILineConfig
;;;25     }
000028  e8bd83f8          POP      {r3-r9,pc}
;;;26     
                          ENDP


                          AREA ||i.init_nvic||, CODE, READONLY, ALIGN=1

                  init_nvic PROC
;;;2      
;;;3      static void init_nvic(uint8_t IRQChannel,
000000  b5f8              PUSH     {r3-r7,lr}
;;;4                            uint8_t PreemptionPriority, uint8_t SubPriority)
;;;5      {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;6          NVIC_InitTypeDef nvic_init_type;
;;;7      
;;;8          nvic_init_type.NVIC_IRQChannel = IRQChannel;
000008  f88d6000          STRB     r6,[sp,#0]
;;;9          nvic_init_type.NVIC_IRQChannelPreemptionPriority =
00000c  f88d4001          STRB     r4,[sp,#1]
;;;10             PreemptionPriority;
;;;11         nvic_init_type.NVIC_IRQChannelSubPriority = SubPriority;
000010  f88d5002          STRB     r5,[sp,#2]
;;;12         nvic_init_type.NVIC_IRQChannelCmd = ENABLE;
000014  2001              MOVS     r0,#1
000016  f88d0003          STRB     r0,[sp,#3]
;;;13         NVIC_Init(&nvic_init_type);
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       NVIC_Init
;;;14     }
000020  bdf8              POP      {r3-r7,pc}
;;;15     
                          ENDP


                          AREA ||i.key_init||, CODE, READONLY, ALIGN=2

                  key_init PROC
;;;37     
;;;38     void key_init(void)
000000  b508              PUSH     {r3,lr}
;;;39     {
;;;40         
;;;41         init_nvic(KEY_ENTER_IRQC, 0, 0);
000002  2200              MOVS     r2,#0
000004  4611              MOV      r1,r2
000006  200a              MOVS     r0,#0xa
000008  f7fffffe          BL       init_nvic
;;;42         init_nvic(KEY_CANCEL_IRQC, 0, 0);
00000c  2200              MOVS     r2,#0
00000e  4611              MOV      r1,r2
000010  2009              MOVS     r0,#9
000012  f7fffffe          BL       init_nvic
;;;43         init_nvic(KEY_UP_IRQC, 0, 0);
000016  2200              MOVS     r2,#0
000018  4611              MOV      r1,r2
00001a  2008              MOVS     r0,#8
00001c  f7fffffe          BL       init_nvic
;;;44         init_nvic(KEY_DOWN_IRQC, 0, 0);
000020  2200              MOVS     r2,#0
000022  4611              MOV      r1,r2
000024  2006              MOVS     r0,#6
000026  f7fffffe          BL       init_nvic
;;;45     
;;;46         RCC_APB2PeriphClockCmd(KEY_ENTER_RCC | KEY_CANCEL_RCC | KEY_UP_RCC | KEY_DOWN_RCC, ENABLE);
00002a  2101              MOVS     r1,#1
00002c  2044              MOVS     r0,#0x44
00002e  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;47         RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
000032  2101              MOVS     r1,#1
000034  4608              MOV      r0,r1
000036  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;48         
;;;49         init_exti(KEY_ENTER_PORT, KEY_ENTER_Pin, GPIO_Mode_IPU, KEY_ENTER_PORTS, KEY_ENTER_PinS);
00003a  2004              MOVS     r0,#4
00003c  4603              MOV      r3,r0
00003e  2248              MOVS     r2,#0x48
000040  2110              MOVS     r1,#0x10
000042  9000              STR      r0,[sp,#0]
000044  480d              LDR      r0,|L4.124|
000046  f7fffffe          BL       init_exti
;;;50         init_exti(KEY_CANCEL_PORT, KEY_CANCEL_Pin, GPIO_Mode_IPU, KEY_CANCEL_PORTS, KEY_CANCEL_PinS);
00004a  2003              MOVS     r0,#3
00004c  2304              MOVS     r3,#4
00004e  2248              MOVS     r2,#0x48
000050  2108              MOVS     r1,#8
000052  9000              STR      r0,[sp,#0]
000054  4809              LDR      r0,|L4.124|
000056  f7fffffe          BL       init_exti
;;;51         init_exti(KEY_UP_PORT, KEY_UP_Pin, GPIO_Mode_IPU, KEY_UP_PORTS, KEY_UP_PinS);
00005a  2002              MOVS     r0,#2
00005c  2304              MOVS     r3,#4
00005e  2248              MOVS     r2,#0x48
000060  4619              MOV      r1,r3
000062  9000              STR      r0,[sp,#0]
000064  4805              LDR      r0,|L4.124|
000066  f7fffffe          BL       init_exti
;;;52         init_exti(KEY_DOWN_PORT, KEY_DOWN_Pin, GPIO_Mode_IPD, KEY_DOWN_PORTS, KEY_DOWN_PinS);
00006a  2000              MOVS     r0,#0
00006c  4603              MOV      r3,r0
00006e  2228              MOVS     r2,#0x28
000070  2101              MOVS     r1,#1
000072  9000              STR      r0,[sp,#0]
000074  4802              LDR      r0,|L4.128|
000076  f7fffffe          BL       init_exti
;;;53     }
00007a  bd08              POP      {r3,pc}
;;;54     
                          ENDP

                  |L4.124|
                          DCD      0x40011800
                  |L4.128|
                          DCD      0x40010800
